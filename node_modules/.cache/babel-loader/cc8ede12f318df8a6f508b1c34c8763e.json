{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.DEFAULT_LOAD_EXTENSIONS = void 0;\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _bluebird = _interopRequireDefault(require(\"bluebird\"));\n\nvar _lodash = require(\"lodash\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar readDirAsync = _bluebird.default.promisify(_fs.default.readdir, {\n  context: _fs.default\n});\n\nvar DEFAULT_LOAD_EXTENSIONS = Object.freeze(['.co', '.coffee', '.eg', '.iced', '.js', '.litcoffee', '.ls', '.ts']);\nexports.DEFAULT_LOAD_EXTENSIONS = DEFAULT_LOAD_EXTENSIONS;\n\nvar FsMigrations =\n/*#__PURE__*/\nfunction () {\n  function FsMigrations(migrationDirectories, sortDirsSeparately, loadExtensions) {\n    _classCallCheck(this, FsMigrations);\n\n    this.sortDirsSeparately = sortDirsSeparately;\n\n    if (!Array.isArray(migrationDirectories)) {\n      migrationDirectories = [migrationDirectories];\n    }\n\n    this.migrationsPaths = migrationDirectories;\n    this.loadExtensions = loadExtensions || DEFAULT_LOAD_EXTENSIONS;\n  }\n  /**\n   * Gets the migration names\n   * @returns Promise<string[]>\n   */\n\n\n  _createClass(FsMigrations, [{\n    key: \"getMigrations\",\n    value: function getMigrations(loadExtensions) {\n      var _this = this;\n\n      // Get a list of files in all specified migration directories\n      var readMigrationsPromises = this.migrationsPaths.map(function (configDir) {\n        var absoluteDir = _path.default.resolve(process.cwd(), configDir);\n\n        return readDirAsync(absoluteDir).then(function (files) {\n          return {\n            files: files,\n            configDir: configDir,\n            absoluteDir: absoluteDir\n          };\n        });\n      });\n      return _bluebird.default.all(readMigrationsPromises).then(function (allMigrations) {\n        var migrations = allMigrations.reduce(function (acc, migrationDirectory) {\n          // When true, files inside the folder should be sorted\n          if (_this.sortDirsSeparately) {\n            migrationDirectory.files = migrationDirectory.files.sort();\n          }\n\n          migrationDirectory.files.forEach(function (file) {\n            return acc.push({\n              file: file,\n              directory: migrationDirectory.configDir\n            });\n          });\n          return acc;\n        }, []); // If true we have already sorted the migrations inside the folders\n        // return the migrations fully qualified\n\n        if (_this.sortDirsSeparately) {\n          return filterMigrations(_this, migrations, loadExtensions || _this.loadExtensions);\n        }\n\n        return filterMigrations(_this, (0, _lodash.sortBy)(migrations, 'file'), loadExtensions || _this.loadExtensions);\n      });\n    }\n  }, {\n    key: \"getMigrationName\",\n    value: function getMigrationName(migration) {\n      return migration.file;\n    }\n  }, {\n    key: \"getMigration\",\n    value: function getMigration(migration) {\n      var absoluteDir = _path.default.resolve(process.cwd(), migration.directory);\n\n      return require(_path.default.join(absoluteDir, migration.file));\n    }\n  }]);\n\n  return FsMigrations;\n}();\n\nexports.default = FsMigrations;\n\nfunction filterMigrations(migrationSource, migrations, loadExtensions) {\n  return (0, _lodash.filter)(migrations, function (migration) {\n    var migrationName = migrationSource.getMigrationName(migration);\n\n    var extension = _path.default.extname(migrationName);\n\n    return loadExtensions.includes(extension);\n  });\n}","map":null,"metadata":{},"sourceType":"script"}