{"ast":null,"code":"\"use strict\";\n\nvar _construct = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/construct\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _inherits = _interopRequireDefault(require(\"inherits\"));\n\nvar _postgres = _interopRequireDefault(require(\"../postgres\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _transaction = _interopRequireDefault(require(\"./transaction\"));\n\nvar _compiler = _interopRequireDefault(require(\"./query/compiler\"));\n\nvar _columnbuilder = _interopRequireDefault(require(\"./schema/columnbuilder\"));\n\nvar _columncompiler = _interopRequireDefault(require(\"./schema/columncompiler\"));\n\nvar _tablecompiler = _interopRequireDefault(require(\"./schema/tablecompiler\"));\n\nvar _compiler2 = _interopRequireDefault(require(\"./schema/compiler\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Redshift\n// -------\n\n\nfunction Client_Redshift(config) {\n  _postgres.default.apply(this, arguments);\n}\n\n(0, _inherits.default)(Client_Redshift, _postgres.default);\n(0, _lodash.assign)(Client_Redshift.prototype, {\n  transaction: function transaction() {\n    return _construct(_transaction.default, [this].concat(Array.prototype.slice.call(arguments)));\n  },\n  queryCompiler: function queryCompiler() {\n    return _construct(_compiler.default, [this].concat(Array.prototype.slice.call(arguments)));\n  },\n  columnBuilder: function columnBuilder() {\n    return _construct(_columnbuilder.default, [this].concat(Array.prototype.slice.call(arguments)));\n  },\n  columnCompiler: function columnCompiler() {\n    return _construct(_columncompiler.default, [this].concat(Array.prototype.slice.call(arguments)));\n  },\n  tableCompiler: function tableCompiler() {\n    return _construct(_tablecompiler.default, [this].concat(Array.prototype.slice.call(arguments)));\n  },\n  schemaCompiler: function schemaCompiler() {\n    return _construct(_compiler2.default, [this].concat(Array.prototype.slice.call(arguments)));\n  },\n  dialect: 'redshift',\n  driverName: 'pg-redshift',\n  _driver: function _driver() {\n    return require('pg');\n  },\n  // Ensures the response is returned in the same format as other clients.\n  processResponse: function processResponse(obj, runner) {\n    var resp = obj.response;\n    if (obj.output) return obj.output.call(runner, resp);\n    if (obj.method === 'raw') return resp;\n\n    if (resp.command === 'SELECT') {\n      if (obj.method === 'first') return resp.rows[0];\n      if (obj.method === 'pluck') return (0, _lodash.map)(resp.rows, obj.pluck);\n      return resp.rows;\n    }\n\n    if (resp.command === 'INSERT' || resp.command === 'UPDATE' || resp.command === 'DELETE') {\n      return resp.rowCount;\n    }\n\n    return resp;\n  }\n});\nvar _default = Client_Redshift;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}