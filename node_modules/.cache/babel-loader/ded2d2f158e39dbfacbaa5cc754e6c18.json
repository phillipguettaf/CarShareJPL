{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _inherits = _interopRequireDefault(require(\"inherits\"));\n\nvar _compiler = _interopRequireDefault(require(\"../../../schema/compiler\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // PostgreSQL Schema Compiler\n// -------\n\n\nfunction SchemaCompiler_PG() {\n  _compiler.default.apply(this, arguments);\n}\n\n(0, _inherits.default)(SchemaCompiler_PG, _compiler.default); // Check whether the current table\n\nSchemaCompiler_PG.prototype.hasTable = function (tableName) {\n  var sql = 'select * from information_schema.tables where table_name = ?';\n  var bindings = [tableName];\n\n  if (this.schema) {\n    sql += ' and table_schema = ?';\n    bindings.push(this.schema);\n  } else {\n    sql += ' and table_schema = current_schema()';\n  }\n\n  this.pushQuery({\n    sql: sql,\n    bindings: bindings,\n    output: function output(resp) {\n      return resp.rows.length > 0;\n    }\n  });\n}; // Compile the query to determine if a column exists in a table.\n\n\nSchemaCompiler_PG.prototype.hasColumn = function (tableName, columnName) {\n  var sql = 'select * from information_schema.columns where table_name = ? and column_name = ?';\n  var bindings = [tableName, columnName];\n\n  if (this.schema) {\n    sql += ' and table_schema = ?';\n    bindings.push(this.schema);\n  } else {\n    sql += ' and table_schema = current_schema()';\n  }\n\n  this.pushQuery({\n    sql: sql,\n    bindings: bindings,\n    output: function output(resp) {\n      return resp.rows.length > 0;\n    }\n  });\n};\n\nSchemaCompiler_PG.prototype.qualifiedTableName = function (tableName) {\n  var name = this.schema ? \"\".concat(this.schema, \".\").concat(tableName) : tableName;\n  return this.formatter.wrap(name);\n}; // Compile a rename table command.\n\n\nSchemaCompiler_PG.prototype.renameTable = function (from, to) {\n  this.pushQuery(\"alter table \".concat(this.qualifiedTableName(from), \" rename to \").concat(this.formatter.wrap(to)));\n};\n\nSchemaCompiler_PG.prototype.createSchema = function (schemaName) {\n  this.pushQuery(\"create schema \".concat(this.formatter.wrap(schemaName)));\n};\n\nSchemaCompiler_PG.prototype.createSchemaIfNotExists = function (schemaName) {\n  this.pushQuery(\"create schema if not exists \".concat(this.formatter.wrap(schemaName)));\n};\n\nSchemaCompiler_PG.prototype.dropSchema = function (schemaName) {\n  this.pushQuery(\"drop schema \".concat(this.formatter.wrap(schemaName)));\n};\n\nSchemaCompiler_PG.prototype.dropSchemaIfExists = function (schemaName) {\n  this.pushQuery(\"drop schema if exists \".concat(this.formatter.wrap(schemaName)));\n};\n\nSchemaCompiler_PG.prototype.dropExtension = function (extensionName) {\n  this.pushQuery(\"drop extension \".concat(this.formatter.wrap(extensionName)));\n};\n\nSchemaCompiler_PG.prototype.dropExtensionIfExists = function (extensionName) {\n  this.pushQuery(\"drop extension if exists \".concat(this.formatter.wrap(extensionName)));\n};\n\nSchemaCompiler_PG.prototype.createExtension = function (extensionName) {\n  this.pushQuery(\"create extension \".concat(this.formatter.wrap(extensionName)));\n};\n\nSchemaCompiler_PG.prototype.createExtensionIfNotExists = function (extensionName) {\n  this.pushQuery(\"create extension if not exists \".concat(this.formatter.wrap(extensionName)));\n};\n\nvar _default = SchemaCompiler_PG;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}