{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _raw = _interopRequireDefault(require(\"../raw\"));\n\nvar helpers = _interopRequireWildcard(require(\"./helpers\"));\n\nvar _lodash = require(\"lodash\");\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Column Compiler\n// Used for designating column definitions\n// during the table \"create\" / \"alter\" statements.\n// -------\n\n\nfunction ColumnCompiler(client, tableCompiler, columnBuilder) {\n  this.client = client;\n  this.tableCompiler = tableCompiler;\n  this.columnBuilder = columnBuilder;\n  this._commonBuilder = this.columnBuilder;\n  this.args = columnBuilder._args;\n  this.type = columnBuilder._type.toLowerCase();\n  this.grouped = (0, _lodash.groupBy)(columnBuilder._statements, 'grouping');\n  this.modified = columnBuilder._modifiers;\n  this.isIncrements = this.type.indexOf('increments') !== -1;\n  this.formatter = client.formatter(columnBuilder);\n  this.sequence = [];\n  this.modifiers = [];\n}\n\nColumnCompiler.prototype.pushQuery = helpers.pushQuery;\nColumnCompiler.prototype.pushAdditional = helpers.pushAdditional;\nColumnCompiler.prototype.unshiftQuery = helpers.unshiftQuery;\nColumnCompiler.prototype._defaultMap = {\n  columnName: function columnName() {\n    if (!this.isIncrements) {\n      throw new Error(\"You did not specify a column name for the \".concat(this.type, \" column.\"));\n    }\n\n    return 'id';\n  }\n};\n\nColumnCompiler.prototype.defaults = function (label) {\n  if (this._defaultMap.hasOwnProperty(label)) {\n    return this._defaultMap[label].bind(this)();\n  } else {\n    throw new Error(\"There is no default for the specified identifier \".concat(label));\n  }\n}; // To convert to sql, we first go through and build the\n// column as it would be in the insert statement\n\n\nColumnCompiler.prototype.toSQL = function () {\n  this.pushQuery(this.compileColumn());\n\n  if (this.sequence.additional) {\n    this.sequence = this.sequence.concat(this.sequence.additional);\n  }\n\n  return this.sequence;\n}; // Compiles a column.\n\n\nColumnCompiler.prototype.compileColumn = function () {\n  return this.formatter.wrap(this.getColumnName()) + ' ' + this.getColumnType() + this.getModifiers();\n}; // Assumes the autoincrementing key is named `id` if not otherwise specified.\n\n\nColumnCompiler.prototype.getColumnName = function () {\n  var value = (0, _lodash.first)(this.args);\n  return value || this.defaults('columnName');\n};\n\nColumnCompiler.prototype.getColumnType = function () {\n  var type = this[this.type];\n  return typeof type === 'function' ? type.apply(this, (0, _lodash.tail)(this.args)) : type;\n};\n\nColumnCompiler.prototype.getModifiers = function () {\n  var modifiers = [];\n\n  for (var i = 0, l = this.modifiers.length; i < l; i++) {\n    var modifier = this.modifiers[i]; //Cannot allow 'nullable' modifiers on increments types\n\n    if (!this.isIncrements || this.isIncrements && modifier === 'comment') {\n      if ((0, _lodash.has)(this.modified, modifier)) {\n        var val = this[modifier].apply(this, this.modified[modifier]);\n        if (val) modifiers.push(val);\n      }\n    }\n  }\n\n  return modifiers.length > 0 ? \" \".concat(modifiers.join(' ')) : '';\n}; // Types\n// ------\n\n\nColumnCompiler.prototype.increments = 'integer not null primary key autoincrement';\nColumnCompiler.prototype.bigincrements = 'integer not null primary key autoincrement';\nColumnCompiler.prototype.integer = ColumnCompiler.prototype.smallint = ColumnCompiler.prototype.mediumint = 'integer';\nColumnCompiler.prototype.biginteger = 'bigint';\n\nColumnCompiler.prototype.varchar = function (length) {\n  return \"varchar(\".concat(this._num(length, 255), \")\");\n};\n\nColumnCompiler.prototype.text = 'text';\nColumnCompiler.prototype.tinyint = 'tinyint';\n\nColumnCompiler.prototype.floating = function (precision, scale) {\n  return \"float(\".concat(this._num(precision, 8), \", \").concat(this._num(scale, 2), \")\");\n};\n\nColumnCompiler.prototype.decimal = function (precision, scale) {\n  if (precision === null) {\n    throw new Error('Specifying no precision on decimal columns is not supported for that SQL dialect.');\n  }\n\n  return \"decimal(\".concat(this._num(precision, 8), \", \").concat(this._num(scale, 2), \")\");\n};\n\nColumnCompiler.prototype.binary = 'blob';\nColumnCompiler.prototype.bool = 'boolean';\nColumnCompiler.prototype.date = 'date';\nColumnCompiler.prototype.datetime = 'datetime';\nColumnCompiler.prototype.time = 'time';\nColumnCompiler.prototype.timestamp = 'timestamp';\nColumnCompiler.prototype.enu = 'varchar';\nColumnCompiler.prototype.bit = ColumnCompiler.prototype.json = 'text';\nColumnCompiler.prototype.uuid = 'char(36)';\n\nColumnCompiler.prototype.specifictype = function (type) {\n  return type;\n}; // Modifiers\n// -------\n\n\nColumnCompiler.prototype.nullable = function (nullable) {\n  return nullable === false ? 'not null' : 'null';\n};\n\nColumnCompiler.prototype.notNullable = function () {\n  return this.nullable(false);\n};\n\nColumnCompiler.prototype.defaultTo = function (value) {\n  if (value === void 0) {\n    return '';\n  } else if (value === null) {\n    value = 'null';\n  } else if (value instanceof _raw.default) {\n    value = value.toQuery();\n  } else if (this.type === 'bool') {\n    if (value === 'false') value = 0;\n    value = \"'\".concat(value ? 1 : 0, \"'\");\n  } else if (this.type === 'json' && (0, _lodash.isObject)(value)) {\n    return JSON.stringify(value);\n  } else {\n    value = \"'\".concat(value, \"'\");\n  }\n\n  return \"default \".concat(value);\n};\n\nColumnCompiler.prototype._num = function (val, fallback) {\n  if (val === undefined || val === null) return fallback;\n  var number = parseInt(val, 10);\n  return isNaN(number) ? fallback : number;\n};\n\nvar _default = ColumnCompiler;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}