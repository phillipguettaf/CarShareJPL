{"ast":null,"code":"import _classCallCheck from \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/src/CarList.js\";\nimport React, { Component } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport { Pane } from 'evergreen-ui';\nimport './CarList.css'; //const knex = require('knex')(require('./server/db/knexfile'));\n\nvar CarList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CarList, _Component);\n\n  function CarList(props) {\n    var _this;\n\n    _classCallCheck(this, CarList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CarList).call(this, props));\n    _this.state = {\n      userlat: '',\n      userlong: '',\n      cars: _this.getCars()\n    };\n    return _this;\n  }\n  /**\tGets the distance between two points (lat1, lon1) & (lat2, long2)\n  *\tand returns it in metres\n  *\tFunction uses the Haversine distance\n  *\tImplementation adapted from GeoSourceData.com's function in Javascript\n  **/\n\n\n  _createClass(CarList, [{\n    key: \"sortCars\",\n    value: function sortCars(userlat, userlong, cars) {\n      this.state.cars.sort(function (a, b) {\n        if (CarList.getDistance(userlat, userlong, a.latitude, a.longitude) < CarList.getDistance(userlat, userlong, b.latitude, b.longitude)) {\n          return -1;\n        } else {\n          return 1;\n        }\n\n        ;\n      });\n    }\n  }, {\n    key: \"getCars\",\n    value: function getCars() {\n      //return knex.select().from('cars');\n      var cars = [{\n        rego: '123456',\n        make: 'Ford Falcon',\n        latitude: '147',\n        longitude: '31'\n      }, {\n        rego: '132456',\n        make: 'Toyota Camry',\n        latitude: '144',\n        longitude: '33'\n      }, {\n        rego: '154326',\n        make: 'Volkswagen Beetle',\n        latitude: '143',\n        longitude: '34'\n      }, {\n        rego: '543321',\n        make: 'Mazda 3',\n        latitude: '145',\n        longitude: '32'\n      }];\n      return cars;\n    }\n  }, {\n    key: \"render\",\n    value: function render(props) {\n      var _this2 = this;\n\n      this.sortCars(this.state.userlat, this.state.userlong, this.state.cars);\n      var carlist = this.state.cars.map(function (car, rego) {\n        return React.createElement(ListItem, {\n          button: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, React.createElement(ListItemText, {\n          primary: car.make,\n          secondary: getDistance(_this2.state.userlat, _this2.state.userlong, car.latitude, car.longitude),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }));\n      });\n      return React.createElement(Pane, {\n        CarList: true,\n        elevation: 0,\n        float: \"left\",\n        backgroundColor: \"white\",\n        width: 400,\n        display: \"flex\",\n        flexDirection: \"column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(List, {\n        component: \"Cars\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, carlist));\n    }\n  }], [{\n    key: \"getDistance\",\n    value: function getDistance(lat1, lon1, lat2, lon2) {\n      var SEMI_CIRCLE_DEGREES = 180;\n      var radlat1 = Math.PI * lat1 / SEMI_CIRCLE_DEGREES;\n      var radlat2 = Math.PI * lat2 / SEMI_CIRCLE_DEGREES;\n      var radlon1 = Math.PI * lon1 / SEMI_CIRCLE_DEGREES;\n      var radlon2 = Math.PI * lon2 / SEMI_CIRCLE_DEGREES;\n      var theta = lon1 - lon2;\n      var radtheta = Math.PI * theta / SEMI_CIRCLE_DEGREES;\n      var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n      dist = Math.acos(dist);\n      dist = dist * SEMI_CIRCLE_DEGREES / Math.PI;\n      dist = dist * (SEMI_CIRCLE_DEGREES / 2) * 1.1515;\n      dist = dist * 1.609344;\n      return dist;\n    }\n  }]);\n\n  return CarList;\n}(Component);\n\nexport default CarList;","map":{"version":3,"sources":["/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/src/CarList.js"],"names":["React","Component","List","ListItem","ListItemIcon","ListItemText","Divider","Pane","CarList","props","state","userlat","userlong","cars","getCars","sort","a","b","getDistance","latitude","longitude","rego","make","sortCars","carlist","map","car","lat1","lon1","lat2","lon2","SEMI_CIRCLE_DEGREES","radlat1","Math","PI","radlat2","radlon1","radlon2","theta","radtheta","dist","sin","cos","acos"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport { Pane } from 'evergreen-ui';\nimport './CarList.css';\n\n\n//const knex = require('knex')(require('./server/db/knexfile'));\n\nclass CarList extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tuserlat: '',\n\t\t\tuserlong: '',\n\t\t\tcars: this.getCars()\n\t\t};\n\t}\n\n\t/**\tGets the distance between two points (lat1, lon1) & (lat2, long2)\n\t*\tand returns it in metres\n\t*\tFunction uses the Haversine distance\n\t*\tImplementation adapted from GeoSourceData.com's function in Javascript\n\t**/\n\tstatic getDistance(lat1, lon1, lat2, lon2) {\n\t\tconst SEMI_CIRCLE_DEGREES = 180;\n\t    var radlat1 = Math.PI * lat1/SEMI_CIRCLE_DEGREES;\n\t    var radlat2 = Math.PI * lat2/SEMI_CIRCLE_DEGREES;\n\t    var radlon1 = Math.PI * lon1/SEMI_CIRCLE_DEGREES;\n\t    var radlon2 = Math.PI * lon2/SEMI_CIRCLE_DEGREES;\n\t    var theta = lon1-lon2;\n\t    var radtheta = Math.PI * theta/SEMI_CIRCLE_DEGREES;\n\t    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\t    dist = Math.acos(dist);\n\t    dist = dist * SEMI_CIRCLE_DEGREES/Math.PI;\n\t    dist = dist * (SEMI_CIRCLE_DEGREES / 2) * 1.1515;\n\t    dist = dist * 1.609344;\n\t    return dist\n\t}\n\n\tsortCars(userlat, userlong, cars) {\n\n\t\tthis.state.cars.sort(function(a,b) {\n\t\t\tif (CarList.getDistance(userlat, userlong, a.latitude, a.longitude) <\n\t\t\t CarList.getDistance(userlat, userlong, b.latitude, b.longitude)) {\n\t\t\t\treturn -1;\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t};\n\t\t});\n\t}\n\n\tgetCars() {\n\t\t//return knex.select().from('cars');\n\t\tvar cars = [\n\t\t\t{ rego: '123456', make: 'Ford Falcon', latitude: '147', longitude: '31'},\n\t\t\t{ rego: '132456', make: 'Toyota Camry', latitude: '144', longitude: '33'},\n\t\t\t{ rego: '154326', make: 'Volkswagen Beetle', latitude: '143', longitude: '34'},\n\t\t\t{ rego: '543321', make: 'Mazda 3', latitude: '145', longitude: '32'}\n\t\t];\n\n\t\treturn cars;\n\t}\n\n\n\n\trender(props) {\n\t\tthis.sortCars(this.state.userlat, this.state.userlong, this.state.cars);\n\t\tconst carlist = this.state.cars.map((car, rego)=>\n\t\t\t\t<ListItem button><ListItemText \n\t\t\t\t\tprimary={car.make} \n\t\t\t\t\tsecondary={getDistance(this.state.userlat, this.state.userlong, car.latitude, car.longitude)}/>\n\t\t\t\t</ListItem> \n\t\t\t\t);\n\t\treturn (\n\t\t\t\n\t\t\t<Pane CarList\n\t\t\t\televation={0}\n\t\t\t    float=\"left\"\n\t\t\t    backgroundColor=\"white\"\n\t\t\t    width={400}\n\t\t\t    display=\"flex\"\n\t\t\t    flexDirection=\"column\"\n\t\t\t>\n\t\t\t\t<List component=\"Cars\">\n\t\t\t\t\t{carlist}\n\t\t\t\t</List>\n\t\t\t</Pane>\n\t\t);\n\t}\n}\n\nexport default CarList;\n"]},"metadata":{},"sourceType":"module"}