{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeArr = normalizeArr;\nexports.containsUndefined = containsUndefined;\nexports.addQueryContext = addQueryContext;\nexports.resolveClientNameWithAliases = resolveClientNameWithAliases;\n\nvar _lodash = require(\"lodash\");\n\nvar _constants = require(\"./constants\");\n/* eslint no-console:0 */\n// Check if the first argument is an array, otherwise uses all arguments as an\n// array.\n\n\nfunction normalizeArr() {\n  var args = new Array(arguments.length);\n\n  for (var i = 0; i < args.length; i++) {\n    args[i] = arguments[i];\n  }\n\n  if (Array.isArray(args[0])) {\n    return args[0];\n  }\n\n  return args;\n}\n\nfunction containsUndefined(mixed) {\n  var argContainsUndefined = false;\n  if ((0, _lodash.isTypedArray)(mixed)) return false;\n\n  if (mixed && (0, _lodash.isFunction)(mixed.toSQL)) {\n    //Any QueryBuilder or Raw will automatically be validated during compile.\n    return argContainsUndefined;\n  }\n\n  if ((0, _lodash.isArray)(mixed)) {\n    for (var i = 0; i < mixed.length; i++) {\n      if (argContainsUndefined) break;\n      argContainsUndefined = this.containsUndefined(mixed[i]);\n    }\n  } else if ((0, _lodash.isPlainObject)(mixed)) {\n    for (var key in mixed) {\n      if (mixed.hasOwnProperty(key)) {\n        if (argContainsUndefined) break;\n        argContainsUndefined = this.containsUndefined(mixed[key]);\n      }\n    }\n  } else {\n    argContainsUndefined = (0, _lodash.isUndefined)(mixed);\n  }\n\n  return argContainsUndefined;\n}\n\nfunction addQueryContext(Target) {\n  // Stores or returns (if called with no arguments) context passed to\n  // wrapIdentifier and postProcessResponse hooks\n  Target.prototype.queryContext = function (context) {\n    if ((0, _lodash.isUndefined)(context)) {\n      return this._queryContext;\n    }\n\n    this._queryContext = context;\n    return this;\n  };\n}\n\nfunction resolveClientNameWithAliases(clientName) {\n  return _constants.CLIENT_ALIASES[clientName] || clientName;\n}","map":null,"metadata":{},"sourceType":"script"}