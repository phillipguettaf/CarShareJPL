{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _inherits = _interopRequireDefault(require(\"inherits\"));\n\nvar _columncompiler = _interopRequireDefault(require(\"../../../schema/columncompiler\"));\n\nvar _lodash = require(\"lodash\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // PostgreSQL Column Compiler\n// -------\n\n\nfunction ColumnCompiler_PG() {\n  _columncompiler.default.apply(this, arguments);\n\n  this.modifiers = ['nullable', 'defaultTo', 'comment'];\n}\n\n(0, _inherits.default)(ColumnCompiler_PG, _columncompiler.default);\nObject.assign(ColumnCompiler_PG.prototype, {\n  // Types\n  // ------\n  bigincrements: 'bigserial primary key',\n  bigint: 'bigint',\n  binary: 'bytea',\n  bit: function bit(column) {\n    return column.length !== false ? \"bit(\".concat(column.length, \")\") : 'bit';\n  },\n  bool: 'boolean',\n  // Create the column definition for an enum type.\n  // Using method \"2\" here: http://stackoverflow.com/a/10984951/525714\n  enu: function enu(allowed, options) {\n    options = options || {};\n    var values = options.useNative && options.existingType ? undefined : allowed.join(\"', '\");\n\n    if (options.useNative) {\n      if (!options.existingType) {\n        this.tableCompiler.unshiftQuery(\"create type \\\"\".concat(options.enumName, \"\\\" as enum ('\").concat(values, \"')\"));\n      }\n\n      return \"\\\"\".concat(options.enumName, \"\\\"\");\n    }\n\n    return \"text check (\".concat(this.formatter.wrap(this.args[0]), \" in ('\").concat(values, \"'))\");\n  },\n  double: 'double precision',\n  decimal: function decimal(precision, scale) {\n    if (precision === null) return 'decimal';\n    return \"decimal(\".concat(this._num(precision, 8), \", \").concat(this._num(scale, 2), \")\");\n  },\n  floating: 'real',\n  increments: 'serial primary key',\n  json: function json(jsonb) {\n    if (jsonb) this.client.logger.deprecate('json(true)', 'jsonb()');\n    return jsonColumn(this.client, jsonb);\n  },\n  jsonb: function jsonb() {\n    return jsonColumn(this.client, true);\n  },\n  smallint: 'smallint',\n  tinyint: 'smallint',\n  datetime: function datetime() {\n    var withoutTz = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var precision = arguments.length > 1 ? arguments[1] : undefined;\n    var useTz;\n\n    if ((0, _lodash.isObject)(withoutTz)) {\n      useTz = withoutTz.useTz;\n      precision = withoutTz.precision;\n    } else {\n      useTz = !withoutTz;\n    }\n\n    return \"\".concat(useTz ? 'timestamptz' : 'timestamp').concat(precision ? '(' + precision + ')' : '');\n  },\n  timestamp: function timestamp() {\n    var withoutTz = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var precision = arguments.length > 1 ? arguments[1] : undefined;\n    var useTz;\n\n    if ((0, _lodash.isObject)(withoutTz)) {\n      useTz = withoutTz.useTz;\n      precision = withoutTz.precision;\n    } else {\n      useTz = !withoutTz;\n    }\n\n    return \"\".concat(useTz ? 'timestamptz' : 'timestamp').concat(precision ? '(' + precision + ')' : '');\n  },\n  uuid: 'uuid',\n  // Modifiers:\n  // ------\n  comment: function comment(_comment) {\n    var columnName = this.args[0] || this.defaults('columnName');\n    this.pushAdditional(function () {\n      this.pushQuery(\"comment on column \".concat(this.tableCompiler.tableName(), \".\") + this.formatter.wrap(columnName) + ' is ' + (_comment ? \"'\".concat(_comment, \"'\") : 'NULL'));\n    }, _comment);\n  }\n});\n\nfunction jsonColumn(client, jsonb) {\n  if (!client.version || parseFloat(client.version) >= 9.2) return jsonb ? 'jsonb' : 'json';\n  return 'text';\n}\n\nvar _default = ColumnCompiler_PG;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}