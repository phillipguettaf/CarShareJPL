{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar _inherits = _interopRequireDefault(require(\"inherits\"));\n\nvar _raw = _interopRequireDefault(require(\"../../../raw\"));\n\nvar _columncompiler = _interopRequireDefault(require(\"../../../schema/columncompiler\"));\n\nvar _trigger = _interopRequireDefault(require(\"./trigger\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Column Compiler\n// -------\n\n\nfunction ColumnCompiler_Oracle() {\n  _columncompiler.default.apply(this, arguments);\n\n  this.modifiers = ['defaultTo', 'checkIn', 'nullable', 'comment'];\n}\n\n(0, _inherits.default)(ColumnCompiler_Oracle, _columncompiler.default);\n(0, _lodash.assign)(ColumnCompiler_Oracle.prototype, {\n  // helper function for pushAdditional in increments() and bigincrements()\n  _createAutoIncrementTriggerAndSequence: function _createAutoIncrementTriggerAndSequence() {\n    // TODO Add warning that sequence etc is created\n    this.pushAdditional(function () {\n      var tableName = this.tableCompiler.tableNameRaw;\n\n      var createTriggerSQL = _trigger.default.createAutoIncrementTrigger(this.client.logger, tableName);\n\n      this.pushQuery(createTriggerSQL);\n    });\n  },\n  increments: function increments() {\n    this._createAutoIncrementTriggerAndSequence();\n\n    return 'integer not null primary key';\n  },\n  bigincrements: function bigincrements() {\n    this._createAutoIncrementTriggerAndSequence();\n\n    return 'number(20, 0) not null primary key';\n  },\n  floating: function floating(precision) {\n    var parsedPrecision = this._num(precision, 0);\n\n    return \"float\".concat(parsedPrecision ? \"(\".concat(parsedPrecision, \")\") : '');\n  },\n  double: function double(precision, scale) {\n    // if (!precision) return 'number'; // TODO: Check If default is ok\n    return \"number(\".concat(this._num(precision, 8), \", \").concat(this._num(scale, 2), \")\");\n  },\n  decimal: function decimal(precision, scale) {\n    if (precision === null) return 'decimal';\n    return \"decimal(\".concat(this._num(precision, 8), \", \").concat(this._num(scale, 2), \")\");\n  },\n  integer: function integer(length) {\n    return length ? \"number(\".concat(this._num(length, 11), \")\") : 'integer';\n  },\n  tinyint: 'smallint',\n  smallint: 'smallint',\n  mediumint: 'integer',\n  biginteger: 'number(20, 0)',\n  text: 'clob',\n  enu: function enu(allowed) {\n    allowed = (0, _lodash.uniq)(allowed);\n    var maxLength = (allowed || []).reduce(function (maxLength, name) {\n      return Math.max(maxLength, String(name).length);\n    }, 1); // implicitly add the enum values as checked values\n\n    this.columnBuilder._modifiers.checkIn = [allowed];\n    return \"varchar2(\".concat(maxLength, \")\");\n  },\n  time: 'timestamp with time zone',\n  datetime: function datetime(without) {\n    return without ? 'timestamp' : 'timestamp with time zone';\n  },\n  timestamp: function timestamp(without) {\n    return without ? 'timestamp' : 'timestamp with time zone';\n  },\n  bit: 'clob',\n  json: 'clob',\n  bool: function bool() {\n    // implicitly add the check for 0 and 1\n    this.columnBuilder._modifiers.checkIn = [[0, 1]];\n    return 'number(1, 0)';\n  },\n  varchar: function varchar(length) {\n    return \"varchar2(\".concat(this._num(length, 255), \")\");\n  },\n  // Modifiers\n  // ------\n  comment: function comment(_comment) {\n    var columnName = this.args[0] || this.defaults('columnName');\n    this.pushAdditional(function () {\n      this.pushQuery(\"comment on column \".concat(this.tableCompiler.tableName(), \".\") + this.formatter.wrap(columnName) + \" is '\" + (_comment || '') + \"'\");\n    }, _comment);\n  },\n  checkIn: function checkIn(value) {\n    // TODO: Maybe accept arguments also as array\n    // TODO: value(s) should be escaped properly\n    if (value === undefined) {\n      return '';\n    } else if (value instanceof _raw.default) {\n      value = value.toQuery();\n    } else if (Array.isArray(value)) {\n      value = (0, _lodash.map)(value, function (v) {\n        return \"'\".concat(v, \"'\");\n      }).join(', ');\n    } else {\n      value = \"'\".concat(value, \"'\");\n    }\n\n    return \"check (\".concat(this.formatter.wrap(this.args[0]), \" in (\").concat(value, \"))\");\n  }\n});\nvar _default = ColumnCompiler_Oracle;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}