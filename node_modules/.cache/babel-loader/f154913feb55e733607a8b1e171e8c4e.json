{"ast":null,"code":"import _classCallCheck from \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/src/CarList.js\";\nimport React, { Component } from 'react'; //const knex = require('knex')(require('./server/db/knexfile'));\n\nvar CarList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CarList, _Component);\n\n  function CarList(props) {\n    var _this;\n\n    _classCallCheck(this, CarList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CarList).call(this, props));\n    _this.state = {\n      userlat: '',\n      userlong: '',\n      cars: _this.getCars()\n    };\n\n    _this.sortCars([_this.state.userlat, _this.state.userlong], _this.state.cars);\n\n    return _this;\n  }\n  /**\tGets the distance between two points (lat1, lon1) & (lat2, long2)\n  *\tand returns it in metres\n  *\tFunction uses the Haversine distance\n  *\tImplementation adapted from GeoSourceData.com's function in Javascript\n  **/\n\n\n  _createClass(CarList, [{\n    key: \"getDistance\",\n    value: function getDistance(lat1, lon1, lat2, lon2) {\n      var SEMI_CIRCLE_DEGREES = 180;\n      var radlat1 = Math.PI * lat1 / SEMI_CIRCLE_DEGREES;\n      var radlat2 = Math.PI * lat2 / SEMI_CIRCLE_DEGREES;\n      var radlon1 = Math.PI * lon1 / SEMI_CIRCLE_DEGREES;\n      var radlon2 = Math.PI * lon2 / SEMI_CIRCLE_DEGREES;\n      var theta = lon1 - lon2;\n      var radtheta = Math.PI * theta / SEMI_CIRCLE_DEGREES;\n      var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n      dist = Math.acos(dist);\n      dist = dist * SEMI_CIRCLE_DEGREES / Math.PI;\n      dist = dist * (SEMI_CIRCLE_DEGREES / 2) * 1.1515;\n      dist = dist * 1.609344;\n      return dist;\n    }\n  }, {\n    key: \"sortCars\",\n    value: function sortCars(userlat, userlong, cars) {\n      this.state.cars.sort(function (a, b) {\n        if (this.getDistance(userlat, userlong, a.latitude, a.longitude) < this.getDistance(userlat, userlong, b.latitude, b.longitude)) {\n          return -1;\n        } else {\n          return 1;\n        }\n\n        ;\n      });\n    }\n  }, {\n    key: \"getCars\",\n    value: function getCars() {\n      //return knex.select().from('cars');\n      var cars = [{\n        rego: '123456',\n        make: 'Car1',\n        latitude: '147',\n        longitude: '31'\n      }, {\n        rego: '132456',\n        make: 'Car2',\n        latitude: '144',\n        longitude: '33'\n      }, {\n        rego: '154326',\n        make: 'Car3',\n        latitude: '143',\n        longitude: '34'\n      }, {\n        rego: '543321',\n        make: 'Car4',\n        latitude: '145',\n        longitude: '32'\n      }];\n      return cars;\n    }\n  }, {\n    key: \"render\",\n    value: function render(props) {\n      var carlist = this.state.cars.map(function (car, rego) {\n        return React.createElement(\"li\", {\n          key: car.rego,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, car.make);\n      });\n      return React.createElement(\"div\", {\n        classname: \"CarList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, carlist));\n    }\n  }]);\n\n  return CarList;\n}(Component);\n\nexport default CarList;","map":{"version":3,"sources":["/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/src/CarList.js"],"names":["React","Component","CarList","props","state","userlat","userlong","cars","getCars","sortCars","lat1","lon1","lat2","lon2","SEMI_CIRCLE_DEGREES","radlat1","Math","PI","radlat2","radlon1","radlon2","theta","radtheta","dist","sin","cos","acos","sort","a","b","getDistance","latitude","longitude","rego","make","carlist","map","car"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;IAEMC,O;;;;;AAEL,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,iFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACZC,MAAAA,OAAO,EAAE,EADG;AAEZC,MAAAA,QAAQ,EAAE,EAFE;AAGZC,MAAAA,IAAI,EAAE,MAAKC,OAAL;AAHM,KAAb;;AAKA,UAAKC,QAAL,CAAc,CAAC,MAAKL,KAAL,CAAWC,OAAZ,EAAqB,MAAKD,KAAL,CAAWE,QAAhC,CAAd,EAAyD,MAAKF,KAAL,CAAWG,IAApE;;AAPkB;AAQlB;AAED;;;;;;;;;gCAKYG,I,EAAMC,I,EAAMC,I,EAAMC,I,EAAM;AACnC,UAAMC,mBAAmB,GAAG,GAA5B;AACG,UAAIC,OAAO,GAAGC,IAAI,CAACC,EAAL,GAAUP,IAAV,GAAeI,mBAA7B;AACA,UAAII,OAAO,GAAGF,IAAI,CAACC,EAAL,GAAUL,IAAV,GAAeE,mBAA7B;AACA,UAAIK,OAAO,GAAGH,IAAI,CAACC,EAAL,GAAUN,IAAV,GAAeG,mBAA7B;AACA,UAAIM,OAAO,GAAGJ,IAAI,CAACC,EAAL,GAAUJ,IAAV,GAAeC,mBAA7B;AACA,UAAIO,KAAK,GAAGV,IAAI,GAACE,IAAjB;AACA,UAAIS,QAAQ,GAAGN,IAAI,CAACC,EAAL,GAAUI,KAAV,GAAgBP,mBAA/B;AACA,UAAIS,IAAI,GAAGP,IAAI,CAACQ,GAAL,CAAST,OAAT,IAAoBC,IAAI,CAACQ,GAAL,CAASN,OAAT,CAApB,GAAwCF,IAAI,CAACS,GAAL,CAASV,OAAT,IAAoBC,IAAI,CAACS,GAAL,CAASP,OAAT,CAApB,GAAwCF,IAAI,CAACS,GAAL,CAASH,QAAT,CAA3F;AACAC,MAAAA,IAAI,GAAGP,IAAI,CAACU,IAAL,CAAUH,IAAV,CAAP;AACAA,MAAAA,IAAI,GAAGA,IAAI,GAAGT,mBAAP,GAA2BE,IAAI,CAACC,EAAvC;AACAM,MAAAA,IAAI,GAAGA,IAAI,IAAIT,mBAAmB,GAAG,CAA1B,CAAJ,GAAmC,MAA1C;AACAS,MAAAA,IAAI,GAAGA,IAAI,GAAG,QAAd;AACA,aAAOA,IAAP;AACH;;;6BAEQlB,O,EAASC,Q,EAAUC,I,EAAM;AAEjC,WAAKH,KAAL,CAAWG,IAAX,CAAgBoB,IAAhB,CAAqB,UAASC,CAAT,EAAWC,CAAX,EAAc;AAClC,YAAI,KAAKC,WAAL,CAAiBzB,OAAjB,EAA0BC,QAA1B,EAAoCsB,CAAC,CAACG,QAAtC,EAAgDH,CAAC,CAACI,SAAlD,IACH,KAAKF,WAAL,CAAiBzB,OAAjB,EAA0BC,QAA1B,EAAoCuB,CAAC,CAACE,QAAtC,EAAgDF,CAAC,CAACG,SAAlD,CADD,EAC+D;AAC9D,iBAAO,CAAC,CAAR;AACA,SAHD,MAGO;AACN,iBAAO,CAAP;AACA;;AAAA;AACD,OAPD;AAQA;;;8BAES;AACT;AACA,UAAIzB,IAAI,GAAG,CACV;AAAE0B,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,IAAI,EAAE,MAAxB;AAAgCH,QAAAA,QAAQ,EAAE,KAA1C;AAAiDC,QAAAA,SAAS,EAAE;AAA5D,OADU,EAEV;AAAEC,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,IAAI,EAAE,MAAxB;AAAgCH,QAAAA,QAAQ,EAAE,KAA1C;AAAiDC,QAAAA,SAAS,EAAE;AAA5D,OAFU,EAGV;AAAEC,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,IAAI,EAAE,MAAxB;AAAgCH,QAAAA,QAAQ,EAAE,KAA1C;AAAiDC,QAAAA,SAAS,EAAE;AAA5D,OAHU,EAIV;AAAEC,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,IAAI,EAAE,MAAxB;AAAgCH,QAAAA,QAAQ,EAAE,KAA1C;AAAiDC,QAAAA,SAAS,EAAE;AAA5D,OAJU,CAAX;AAOA,aAAOzB,IAAP;AACA;;;2BAIMJ,K,EAAO;AACb,UAAMgC,OAAO,GAAG,KAAK/B,KAAL,CAAWG,IAAX,CAAgB6B,GAAhB,CAAoB,UAACC,GAAD,EAAMJ,IAAN;AAAA,eAClC;AAAI,UAAA,GAAG,EAAEI,GAAG,CAACJ,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAoBI,GAAG,CAACH,IAAxB,CADkC;AAAA,OAApB,CAAhB;AAGA,aAEC;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACEC,OADF,CADD,CAFD;AAQA;;;;EAvEoBlC,S;;AA0EtB,eAAeC,OAAf","sourcesContent":["import React, { Component } from 'react';\n\n//const knex = require('knex')(require('./server/db/knexfile'));\n\nclass CarList extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tuserlat: '',\n\t\t\tuserlong: '',\n\t\t\tcars: this.getCars()\n\t\t};\n\t\tthis.sortCars([this.state.userlat, this.state.userlong], this.state.cars);\n\t}\n\n\t/**\tGets the distance between two points (lat1, lon1) & (lat2, long2)\n\t*\tand returns it in metres\n\t*\tFunction uses the Haversine distance\n\t*\tImplementation adapted from GeoSourceData.com's function in Javascript\n\t**/\n\tgetDistance(lat1, lon1, lat2, lon2) {\n\t\tconst SEMI_CIRCLE_DEGREES = 180;\n\t    var radlat1 = Math.PI * lat1/SEMI_CIRCLE_DEGREES;\n\t    var radlat2 = Math.PI * lat2/SEMI_CIRCLE_DEGREES;\n\t    var radlon1 = Math.PI * lon1/SEMI_CIRCLE_DEGREES;\n\t    var radlon2 = Math.PI * lon2/SEMI_CIRCLE_DEGREES;\n\t    var theta = lon1-lon2;\n\t    var radtheta = Math.PI * theta/SEMI_CIRCLE_DEGREES;\n\t    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\t    dist = Math.acos(dist);\n\t    dist = dist * SEMI_CIRCLE_DEGREES/Math.PI;\n\t    dist = dist * (SEMI_CIRCLE_DEGREES / 2) * 1.1515;\n\t    dist = dist * 1.609344;\n\t    return dist\n\t}\n\n\tsortCars(userlat, userlong, cars) {\n\n\t\tthis.state.cars.sort(function(a,b) {\n\t\t\tif (this.getDistance(userlat, userlong, a.latitude, a.longitude) <\n\t\t\t this.getDistance(userlat, userlong, b.latitude, b.longitude)) {\n\t\t\t\treturn -1;\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t};\n\t\t});\n\t}\n\n\tgetCars() {\n\t\t//return knex.select().from('cars');\n\t\tvar cars = [\n\t\t\t{ rego: '123456', make: 'Car1', latitude: '147', longitude: '31'},\n\t\t\t{ rego: '132456', make: 'Car2', latitude: '144', longitude: '33'},\n\t\t\t{ rego: '154326', make: 'Car3', latitude: '143', longitude: '34'},\n\t\t\t{ rego: '543321', make: 'Car4', latitude: '145', longitude: '32'}\n\t\t];\n\n\t\treturn cars;\n\t}\n\n\n\n\trender(props) {\n\t\tconst carlist = this.state.cars.map((car, rego)=>\n\t\t\t\t<li key={car.rego}>{car.make}</li>\n\t\t\t\t);\n\t\treturn (\n\t\t\t\n\t\t\t<div classname=\"CarList\">\n\t\t\t\t<ul>\n\t\t\t\t\t{carlist}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default CarList;\n"]},"metadata":{},"sourceType":"module"}