{"ast":null,"code":"import _defineProperty from \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/src/JPLMap.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport CarList from './CarList';\nimport { Pane } from 'evergreen-ui';\nimport { ReactBingmaps } from 'react-bingmaps';\n\nvar JPLMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(JPLMap, _Component);\n\n  function JPLMap() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, JPLMap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(JPLMap)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      response: '',\n      post: '',\n      responseToPost: '',\n      latitude: null,\n      longitude: null,\n      error: null,\n      havePos: null,\n      //Empty array, to be filled by geolocation + db data\n      pushPins: [{}]\n    };\n    return _this;\n  }\n\n  _createClass(JPLMap, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      //navigator.geolocation.getCurrentPosition(\n      //watchPosition lets us update the pin for the user as they move + fixes displaying it!\n      this.watchId = navigator.geolocation.watchPosition(function (position) {\n        console.log(_this2);\n\n        _this2.setState({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          error: null,\n          pushPins: [{\n            \"location\": [position.coords.latitude, position.coords.longitude],\n            \"option\": {\n              color: 'red'\n            }\n          }]\n        });\n      }, function (error) {\n        return _this2.setState({\n          error: error.message\n        });\n      }, {\n        enableHighAccuracy: false,\n        timeout: 20000,\n        maximumAge: 1000\n      });\n    }\n    /* componentDidMount() {\n    } */\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      navigator.geolocation.clearWatch(this.watchId);\n    }\n    /* onTap = (lat, long) => {\n    \tthis.setState({\n    \t\t//pushPins:[...this.state.pushPins, {\"location\":[-37.8135, 144.9630], \"option\":{ color: 'green' }}]\n    \t\tpushPins:[...this.state.pushPins, {\"location\":[lat, long], \"option\":{ color: 'red' }}]\n    \t});\n    } */\n\n  }, {\n    key: \"render\",\n    value: function render(props) {\n      var _React$createElement;\n\n      return React.createElement(\"div\", {\n        className: \"Bingmapcont\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Latitude: \", this.state.latitude), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Longitude: \", this.state.longitude), React.createElement(CarList, (_React$createElement = {\n        userlat: this.state.latitude\n      }, _defineProperty(_React$createElement, \"userlat\", this.state.longitude), _defineProperty(_React$createElement, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement)), React.createElement(ReactBingmaps, {\n        bingmapKey: \"Ak4YC0ivePGISt6hRJCxFzEeCw67C2dnZV5lPncBzK7v4FOPaHjGrbbIoeww90mP\" //center = {[this.state.lat, this.state.long]} \n        ,\n        center: [0, 0],\n        pushPins: this.state.pushPins,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return JPLMap;\n}(Component);\n\nexport default JPLMap;","map":{"version":3,"sources":["/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/src/JPLMap.js"],"names":["React","Component","CarList","Pane","ReactBingmaps","JPLMap","state","response","post","responseToPost","latitude","longitude","error","havePos","pushPins","watchId","navigator","geolocation","watchPosition","position","console","log","setState","coords","color","message","enableHighAccuracy","timeout","maximumAge","clearWatch","props"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,IAAT,QAAqB,cAArB;AAEA,SAASC,aAAT,QAA8B,gBAA9B;;IAEMC,M;;;;;;;;;;;;;;;;;UAELC,K,GAAQ;AACPC,MAAAA,QAAQ,EAAE,EADH;AAEPC,MAAAA,IAAI,EAAE,EAFC;AAGPC,MAAAA,cAAc,EAAE,EAHT;AAIPC,MAAAA,QAAQ,EAAE,IAJH;AAKPC,MAAAA,SAAS,EAAE,IALJ;AAMPC,MAAAA,KAAK,EAAE,IANA;AAOPC,MAAAA,OAAO,EAAE,IAPF;AAQP;AACAC,MAAAA,QAAQ,EAAG,CACV,EADU;AATJ,K;;;;;;yCAiBa;AAAA;;AACpB;AACA;AACA,WAAKC,OAAL,GAAeC,SAAS,CAACC,WAAV,CAAsBC,aAAtB,CACd,UAACC,QAAD,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;AACA,QAAA,MAAI,CAACC,QAAL,CAAc;AACbZ,UAAAA,QAAQ,EAAES,QAAQ,CAACI,MAAT,CAAgBb,QADb;AAEbC,UAAAA,SAAS,EAAEQ,QAAQ,CAACI,MAAT,CAAgBZ,SAFd;AAGbC,UAAAA,KAAK,EAAE,IAHM;AAIbE,UAAAA,QAAQ,EAAG,CACV;AACC,wBAAW,CAACK,QAAQ,CAACI,MAAT,CAAgBb,QAAjB,EAA2BS,QAAQ,CAACI,MAAT,CAAgBZ,SAA3C,CADZ;AACmE,sBAAS;AAAEa,cAAAA,KAAK,EAAE;AAAT;AAD5E,WADU;AAJE,SAAd;AAUC,OAba,EAcd,UAACZ,KAAD;AAAA,eAAW,MAAI,CAACU,QAAL,CAAc;AAACV,UAAAA,KAAK,EAAEA,KAAK,CAACa;AAAd,SAAd,CAAX;AAAA,OAdc,EAed;AAAEC,QAAAA,kBAAkB,EAAE,KAAtB;AAA6BC,QAAAA,OAAO,EAAE,KAAtC;AAA6CC,QAAAA,UAAU,EAAE;AAAzD,OAfc,CAAf;AAiBA;AAED;;;;;2CAGuB;AACpBZ,MAAAA,SAAS,CAACC,WAAV,CAAsBY,UAAtB,CAAiC,KAAKd,OAAtC;AACF;AAED;;;;;;;;;2BAQOe,K,EACP;AAAA;;AACC,aAEC;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoB,KAAKxB,KAAL,CAAWI,QAD/B,CADA,EAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACa,KAAKJ,KAAL,CAAWK,SADxB,CAJA,EAOA,oBAAC,OAAD;AAAS,QAAA,OAAO,EAAE,KAAKL,KAAL,CAAWI;AAA7B,0DAAgD,KAAKJ,KAAL,CAAWK,SAA3D;AAAA;AAAA;AAAA,uFAPA,EAUC,oBAAC,aAAD;AACC,QAAA,UAAU,EAAG,kEADd,CAEC;AAFD;AAGC,QAAA,MAAM,EAAI,CAAC,CAAD,EAAG,CAAH,CAHX;AAIC,QAAA,QAAQ,EAAI,KAAKL,KAAL,CAAWQ,QAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVD,CAFD;AAsBA;;;;EAhFmBb,S;;AAmFrB,eAAeI,MAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport CarList from './CarList';\nimport { Pane } from 'evergreen-ui';\n\nimport { ReactBingmaps } from 'react-bingmaps';\n\nclass JPLMap extends Component\n{\n\tstate = {\n\t\tresponse: '',\n\t\tpost: '',\n\t\tresponseToPost: '',\n\t\tlatitude: null,\n\t\tlongitude: null,\n\t\terror: null,\n\t\thavePos: null,\n\t\t//Empty array, to be filled by geolocation + db data\n\t\tpushPins : [\n\t\t\t{\n\t\t\t \n\t\t\t}\n\t\t],\n\t};\n\n\n\tcomponentWillMount() {\n\t\t//navigator.geolocation.getCurrentPosition(\n\t\t//watchPosition lets us update the pin for the user as they move + fixes displaying it!\n\t\tthis.watchId = navigator.geolocation.watchPosition(\n\t\t\t(position) => {\n\t\t\tconsole.log(this);\n\t\t\tthis.setState({\n\t\t\t\tlatitude: position.coords.latitude,\n\t\t\t\tlongitude: position.coords.longitude,\n\t\t\t\terror: null,\n\t\t\t\tpushPins : [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"location\":[position.coords.latitude, position.coords.longitude], \"option\":{ color: 'red' },\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t});\n\t\t\t},\n\t\t\t(error) => this.setState({error: error.message}),\n\t\t\t{ enableHighAccuracy: false, timeout: 20000, maximumAge: 1000},\n\t\t); \n\t}\n\n\t/* componentDidMount() {\n\t} */\n\n\tcomponentWillUnmount() {\n    navigator.geolocation.clearWatch(this.watchId);\n\t}\n\n\t/* onTap = (lat, long) => {\n\t\tthis.setState({\n\t\t\t//pushPins:[...this.state.pushPins, {\"location\":[-37.8135, 144.9630], \"option\":{ color: 'green' }}]\n\t\t\tpushPins:[...this.state.pushPins, {\"location\":[lat, long], \"option\":{ color: 'red' }}]\n\t\t});\n\t} */\n\n\n\trender(props)\n\t{\n\t\treturn (\n\t\t\t\n\t\t\t<div className=\"Bingmapcont\">\n\t\t\t<p>\n            Latitude: {this.state.latitude}\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tLongitude: {this.state.longitude}\n\t\t\t</p>\n\t\t\t<CarList userlat={this.state.latitude} userlat={this.state.longitude}/>\n\t\t\t\n\t\t\t{/* <button onClick={() => { this.onTap(this.state.latitude, this.state.longitude) }}>Frick</button> */}\n\t\t\t\t<ReactBingmaps\n\t\t\t\t\tbingmapKey = 'Ak4YC0ivePGISt6hRJCxFzEeCw67C2dnZV5lPncBzK7v4FOPaHjGrbbIoeww90mP'\n\t\t\t\t\t//center = {[this.state.lat, this.state.long]} \n\t\t\t\t\tcenter = {[0,0]}\n\t\t\t\t\tpushPins = {this.state.pushPins}\n\t\t\t\t\t>\n\t\t\t\t</ReactBingmaps>\n\t\t\t\t</div>\n\n\t\t);\n\t}\n}\n\nexport default JPLMap;\n"]},"metadata":{},"sourceType":"module"}