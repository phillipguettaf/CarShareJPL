{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _raw = _interopRequireDefault(require(\"./raw\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Ref =\n/*#__PURE__*/\nfunction (_raw$default) {\n  _inherits(Ref, _raw$default);\n\n  function Ref(client, ref) {\n    var _this;\n\n    _classCallCheck(this, Ref);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Ref).call(this, client));\n    _this.ref = ref;\n    _this._schema = null;\n    _this._alias = null;\n    return _this;\n  }\n\n  _createClass(Ref, [{\n    key: \"withSchema\",\n    value: function withSchema(schema) {\n      this._schema = schema;\n      return this;\n    }\n  }, {\n    key: \"as\",\n    value: function as(alias) {\n      this._alias = alias;\n      return this;\n    }\n  }, {\n    key: \"toSQL\",\n    value: function toSQL() {\n      var string = this._schema ? \"\".concat(this._schema, \".\").concat(this.ref) : this.ref;\n      var formatter = this.client.formatter(this);\n      var ref = formatter.columnize(string);\n      var sql = this._alias ? \"\".concat(ref, \" as \").concat(formatter.wrap(this._alias)) : ref;\n      this.set(sql, []);\n      return _get(_getPrototypeOf(Ref.prototype), \"toSQL\", this).apply(this, arguments);\n    }\n  }]);\n\n  return Ref;\n}(_raw.default);\n\nvar _default = Ref;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}