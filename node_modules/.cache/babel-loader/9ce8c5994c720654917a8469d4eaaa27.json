{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _bluebird = _interopRequireDefault(require(\"bluebird\"));\n\nvar _transaction = _interopRequireDefault(require(\"../../transaction\"));\n\nvar _lodash = require(\"lodash\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar debug = require('debug')('knex:tx');\n\nvar Transaction_MSSQL =\n/*#__PURE__*/\nfunction (_transaction$default) {\n  _inherits(Transaction_MSSQL, _transaction$default);\n\n  function Transaction_MSSQL() {\n    _classCallCheck(this, Transaction_MSSQL);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Transaction_MSSQL).apply(this, arguments));\n  }\n\n  _createClass(Transaction_MSSQL, [{\n    key: \"begin\",\n    value: function begin(conn) {\n      debug('%s: begin', this.txid);\n      return conn.tx_.begin().then(this._resolver, this._rejecter);\n    }\n  }, {\n    key: \"savepoint\",\n    value: function savepoint(conn) {\n      var _this = this;\n\n      debug('%s: savepoint at', this.txid);\n      return _bluebird.default.resolve().then(function () {\n        return _this.query(conn, \"SAVE TRANSACTION \".concat(_this.txid));\n      });\n    }\n  }, {\n    key: \"commit\",\n    value: function commit(conn, value) {\n      var _this2 = this;\n\n      this._completed = true;\n      debug('%s: commit', this.txid);\n      return conn.tx_.commit().then(function () {\n        return _this2._resolver(value);\n      }, this._rejecter);\n    }\n  }, {\n    key: \"release\",\n    value: function release(conn, value) {\n      return this._resolver(value);\n    }\n  }, {\n    key: \"rollback\",\n    value: function rollback(conn, error) {\n      var _this3 = this;\n\n      this._completed = true;\n      debug('%s: rolling back', this.txid);\n      return conn.tx_.rollback().then(function () {\n        var err = error;\n\n        if ((0, _lodash.isUndefined)(error)) {\n          err = new Error(\"Transaction rejected with non-error: \".concat(error));\n        }\n\n        _this3._rejecter(err);\n      }, function (err) {\n        if (error) err.originalError = error;\n        return _this3._rejecter(err);\n      });\n    }\n  }, {\n    key: \"rollbackTo\",\n    value: function rollbackTo(conn, error) {\n      var _this4 = this;\n\n      debug('%s: rolling backTo', this.txid);\n      return _bluebird.default.resolve().then(function () {\n        return _this4.query(conn, \"ROLLBACK TRANSACTION \".concat(_this4.txid), 2, error);\n      }).then(function () {\n        return _this4._rejecter(error);\n      });\n    } // Acquire a connection and create a disposer - either using the one passed\n    // via config or getting one off the client. The disposer will be called once\n    // the original promise is marked completed.\n\n  }, {\n    key: \"acquireConnection\",\n    value: function acquireConnection(config) {\n      var t = this;\n      var configConnection = config && config.connection;\n      return _bluebird.default.try(function () {\n        return (t.outerTx ? t.outerTx.conn : null) || configConnection || t.client.acquireConnection();\n      }).tap(function (conn) {\n        conn.__knexTxId = t.txid;\n\n        if (!t.outerTx) {\n          t.conn = conn;\n          conn.tx_ = conn.transaction();\n        }\n      }).disposer(function (conn) {\n        if (t.outerTx) return;\n\n        if (conn.tx_) {\n          if (!t._completed) {\n            debug('%s: unreleased transaction', t.txid);\n            conn.tx_.rollback();\n          }\n\n          conn.tx_ = null;\n        }\n\n        t.conn = null;\n\n        if (!configConnection) {\n          debug('%s: releasing connection', t.txid);\n          t.client.releaseConnection(conn);\n        } else {\n          debug('%s: not releasing external connection', t.txid);\n        }\n      });\n    }\n  }]);\n\n  return Transaction_MSSQL;\n}(_transaction.default);\n\nexports.default = Transaction_MSSQL;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}