{"ast":null,"code":"\"use strict\";\n\nvar _construct = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/construct\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _bluebird = _interopRequireDefault(require(\"bluebird\"));\n\nvar _inherits = _interopRequireDefault(require(\"inherits\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _client = _interopRequireDefault(require(\"../../client\"));\n\nvar _compiler = _interopRequireDefault(require(\"./query/compiler\"));\n\nvar _compiler2 = _interopRequireDefault(require(\"./schema/compiler\"));\n\nvar _columncompiler = _interopRequireDefault(require(\"./schema/columncompiler\"));\n\nvar _tablecompiler = _interopRequireDefault(require(\"./schema/tablecompiler\"));\n\nvar _ddl = _interopRequireDefault(require(\"./schema/ddl\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // SQLite3\n// -------\n\n\nfunction Client_SQLite3(config) {\n  _client.default.call(this, config);\n\n  if ((0, _lodash.isUndefined)(config.useNullAsDefault)) {\n    this.logger.warn('sqlite does not support inserting default values. Set the ' + '`useNullAsDefault` flag to hide this warning. ' + '(see docs http://knexjs.org/#Builder-insert).');\n  }\n}\n\n(0, _inherits.default)(Client_SQLite3, _client.default);\n(0, _lodash.assign)(Client_SQLite3.prototype, {\n  dialect: 'sqlite3',\n  driverName: 'sqlite3',\n  _driver: function _driver() {\n    return require('sqlite3');\n  },\n  schemaCompiler: function schemaCompiler() {\n    return _construct(_compiler2.default, [this].concat(Array.prototype.slice.call(arguments)));\n  },\n  queryCompiler: function queryCompiler() {\n    return _construct(_compiler.default, [this].concat(Array.prototype.slice.call(arguments)));\n  },\n  columnCompiler: function columnCompiler() {\n    return _construct(_columncompiler.default, [this].concat(Array.prototype.slice.call(arguments)));\n  },\n  tableCompiler: function tableCompiler() {\n    return _construct(_tablecompiler.default, [this].concat(Array.prototype.slice.call(arguments)));\n  },\n  ddl: function ddl(compiler, pragma, connection) {\n    return new _ddl.default(this, compiler, pragma, connection);\n  },\n  wrapIdentifierImpl: function wrapIdentifierImpl(value) {\n    return value !== '*' ? \"`\".concat(value.replace(/`/g, '``'), \"`\") : '*';\n  },\n  // Get a raw connection from the database, returning a promise with the connection object.\n  acquireRawConnection: function acquireRawConnection() {\n    var _this = this;\n\n    return new _bluebird.default(function (resolve, reject) {\n      var db = new _this.driver.Database(_this.connectionSettings.filename, function (err) {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(db);\n      });\n    });\n  },\n  // Used to explicitly close a connection, called internally by the pool when\n  // a connection times out or the pool is shutdown.\n  destroyRawConnection: function destroyRawConnection(connection) {\n    return _bluebird.default.fromCallback(connection.close.bind(connection));\n  },\n  // Runs the query on the specified connection, providing the bindings and any\n  // other necessary prep work.\n  _query: function _query(connection, obj) {\n    var method = obj.method;\n    var callMethod;\n\n    switch (method) {\n      case 'insert':\n      case 'update':\n      case 'counter':\n      case 'del':\n        callMethod = 'run';\n        break;\n\n      default:\n        callMethod = 'all';\n    }\n\n    return new _bluebird.default(function (resolver, rejecter) {\n      if (!connection || !connection[callMethod]) {\n        return rejecter(new Error(\"Error calling \".concat(callMethod, \" on connection.\")));\n      }\n\n      connection[callMethod](obj.sql, obj.bindings, function (err, response) {\n        if (err) return rejecter(err);\n        obj.response = response; // We need the context here, as it contains\n        // the \"this.lastID\" or \"this.changes\"\n\n        obj.context = this;\n        return resolver(obj);\n      });\n    });\n  },\n  _stream: function _stream(connection, sql, stream) {\n    var client = this;\n    return new _bluebird.default(function (resolver, rejecter) {\n      stream.on('error', rejecter);\n      stream.on('end', resolver);\n      return client._query(connection, sql).then(function (obj) {\n        return obj.response;\n      }).map(function (row) {\n        stream.write(row);\n      }).catch(function (err) {\n        stream.emit('error', err);\n      }).then(function () {\n        stream.end();\n      });\n    });\n  },\n  // Ensures the response is returned in the same format as other clients.\n  processResponse: function processResponse(obj, runner) {\n    var ctx = obj.context;\n    var response = obj.response;\n    if (obj.output) return obj.output.call(runner, response);\n\n    switch (obj.method) {\n      case 'select':\n      case 'pluck':\n      case 'first':\n        if (obj.method === 'pluck') response = (0, _lodash.map)(response, obj.pluck);\n        return obj.method === 'first' ? response[0] : response;\n\n      case 'insert':\n        return [ctx.lastID];\n\n      case 'del':\n      case 'update':\n      case 'counter':\n        return ctx.changes;\n\n      default:\n        return response;\n    }\n  },\n  poolDefaults: function poolDefaults() {\n    return (0, _lodash.defaults)({\n      min: 1,\n      max: 1\n    }, _client.default.prototype.poolDefaults.call(this));\n  }\n});\nvar _default = Client_SQLite3;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}