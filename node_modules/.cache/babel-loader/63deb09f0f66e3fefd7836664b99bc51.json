{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _inherits = _interopRequireDefault(require(\"inherits\"));\n\nvar _tablecompiler = _interopRequireDefault(require(\"../../../schema/tablecompiler\"));\n\nvar _bluebird = _interopRequireDefault(require(\"bluebird\"));\n\nvar _lodash = require(\"lodash\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint max-len:0 no-console:0*/\n// MySQL Table Builder & Compiler\n// -------\n// Table Compiler\n// ------\n\n\nfunction TableCompiler_MySQL() {\n  _tablecompiler.default.apply(this, arguments);\n}\n\n(0, _inherits.default)(TableCompiler_MySQL, _tablecompiler.default);\n(0, _lodash.assign)(TableCompiler_MySQL.prototype, {\n  createQuery: function createQuery(columns, ifNot) {\n    var createStatement = ifNot ? 'create table if not exists ' : 'create table ';\n    var client = this.client;\n    var conn = {};\n    var sql = createStatement + this.tableName() + ' (' + columns.sql.join(', ') + ')'; // Check if the connection settings are set.\n\n    if (client.connectionSettings) {\n      conn = client.connectionSettings;\n    }\n\n    var charset = this.single.charset || conn.charset || '';\n    var collation = this.single.collate || conn.collate || '';\n    var engine = this.single.engine || ''; // var conn = builder.client.connectionSettings;\n\n    if (charset) sql += \" default character set \".concat(charset);\n    if (collation) sql += \" collate \".concat(collation);\n    if (engine) sql += \" engine = \".concat(engine);\n\n    if (this.single.comment) {\n      var comment = this.single.comment || '';\n      if (comment.length > 60) this.client.logger.warn('The max length for a table comment is 60 characters');\n      sql += \" comment = '\".concat(comment, \"'\");\n    }\n\n    this.pushQuery(sql);\n  },\n  addColumnsPrefix: 'add ',\n  alterColumnsPrefix: 'modify ',\n  dropColumnPrefix: 'drop ',\n  // Compiles the comment on the table.\n  comment: function comment(_comment) {\n    this.pushQuery(\"alter table \".concat(this.tableName(), \" comment = '\").concat(_comment, \"'\"));\n  },\n  changeType: function changeType() {// alter table + table + ' modify ' + wrapped + '// type';\n  },\n  // Renames a column on the table.\n  renameColumn: function renameColumn(from, to) {\n    var compiler = this;\n    var table = this.tableName();\n    var wrapped = this.formatter.wrap(from) + ' ' + this.formatter.wrap(to);\n    this.pushQuery({\n      sql: \"show fields from \".concat(table, \" where field = \") + this.formatter.parameter(from),\n      output: function output(resp) {\n        var column = resp[0];\n        var runner = this;\n        return compiler.getFKRefs(runner).get(0).then(function (refs) {\n          return _bluebird.default.try(function () {\n            if (!refs.length) {\n              return;\n            }\n\n            return compiler.dropFKRefs(runner, refs);\n          }).then(function () {\n            var sql = \"alter table \".concat(table, \" change \").concat(wrapped, \" \").concat(column.Type);\n\n            if (String(column.Null).toUpperCase() !== 'YES') {\n              sql += \" NOT NULL\";\n            }\n\n            if (column.Default !== void 0 && column.Default !== null) {\n              sql += \" DEFAULT '\".concat(column.Default, \"'\");\n            }\n\n            return runner.query({\n              sql: sql\n            });\n          }).then(function () {\n            if (!refs.length) {\n              return;\n            }\n\n            return compiler.createFKRefs(runner, refs.map(function (ref) {\n              if (ref.REFERENCED_COLUMN_NAME === from) {\n                ref.REFERENCED_COLUMN_NAME = to;\n              }\n\n              if (ref.COLUMN_NAME === from) {\n                ref.COLUMN_NAME = to;\n              }\n\n              return ref;\n            }));\n          });\n        });\n      }\n    });\n  },\n  getFKRefs: function getFKRefs(runner) {\n    var formatter = this.client.formatter(this.tableBuilder);\n    var sql = 'SELECT KCU.CONSTRAINT_NAME, KCU.TABLE_NAME, KCU.COLUMN_NAME, ' + '       KCU.REFERENCED_TABLE_NAME, KCU.REFERENCED_COLUMN_NAME, ' + '       RC.UPDATE_RULE, RC.DELETE_RULE ' + 'FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU ' + 'JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS RC ' + '       USING(CONSTRAINT_NAME)' + 'WHERE KCU.REFERENCED_TABLE_NAME = ' + formatter.parameter(this.tableNameRaw) + ' ' + '  AND KCU.CONSTRAINT_SCHEMA = ' + formatter.parameter(this.client.database()) + ' ' + '  AND RC.CONSTRAINT_SCHEMA = ' + formatter.parameter(this.client.database());\n    return runner.query({\n      sql: sql,\n      bindings: formatter.bindings\n    });\n  },\n  dropFKRefs: function dropFKRefs(runner, refs) {\n    var formatter = this.client.formatter(this.tableBuilder);\n    return _bluebird.default.all(refs.map(function (ref) {\n      var constraintName = formatter.wrap(ref.CONSTRAINT_NAME);\n      var tableName = formatter.wrap(ref.TABLE_NAME);\n      return runner.query({\n        sql: \"alter table \".concat(tableName, \" drop foreign key \").concat(constraintName)\n      });\n    }));\n  },\n  createFKRefs: function createFKRefs(runner, refs) {\n    var formatter = this.client.formatter(this.tableBuilder);\n    return _bluebird.default.all(refs.map(function (ref) {\n      var tableName = formatter.wrap(ref.TABLE_NAME);\n      var keyName = formatter.wrap(ref.CONSTRAINT_NAME);\n      var column = formatter.columnize(ref.COLUMN_NAME);\n      var references = formatter.columnize(ref.REFERENCED_COLUMN_NAME);\n      var inTable = formatter.wrap(ref.REFERENCED_TABLE_NAME);\n      var onUpdate = \" ON UPDATE \".concat(ref.UPDATE_RULE);\n      var onDelete = \" ON DELETE \".concat(ref.DELETE_RULE);\n      return runner.query({\n        sql: \"alter table \".concat(tableName, \" add constraint \").concat(keyName, \" \") + 'foreign key (' + column + ') references ' + inTable + ' (' + references + ')' + onUpdate + onDelete\n      });\n    }));\n  },\n  index: function index(columns, indexName, indexType) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(\"alter table \".concat(this.tableName(), \" add\").concat(indexType ? \" \".concat(indexType) : '', \" index \").concat(indexName, \"(\").concat(this.formatter.columnize(columns), \")\"));\n  },\n  primary: function primary(columns, constraintName) {\n    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(\"\".concat(this.tableNameRaw, \"_pkey\"));\n    this.pushQuery(\"alter table \".concat(this.tableName(), \" add primary key \").concat(constraintName, \"(\").concat(this.formatter.columnize(columns), \")\"));\n  },\n  unique: function unique(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, columns);\n    this.pushQuery(\"alter table \".concat(this.tableName(), \" add unique \").concat(indexName, \"(\").concat(this.formatter.columnize(columns), \")\"));\n  },\n  // Compile a drop index command.\n  dropIndex: function dropIndex(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(\"alter table \".concat(this.tableName(), \" drop index \").concat(indexName));\n  },\n  // Compile a drop foreign key command.\n  dropForeign: function dropForeign(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('foreign', this.tableNameRaw, columns);\n    this.pushQuery(\"alter table \".concat(this.tableName(), \" drop foreign key \").concat(indexName));\n  },\n  // Compile a drop primary key command.\n  dropPrimary: function dropPrimary() {\n    this.pushQuery(\"alter table \".concat(this.tableName(), \" drop primary key\"));\n  },\n  // Compile a drop unique key command.\n  dropUnique: function dropUnique(column, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, column);\n    this.pushQuery(\"alter table \".concat(this.tableName(), \" drop index \").concat(indexName));\n  }\n});\nvar _default = TableCompiler_MySQL;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}