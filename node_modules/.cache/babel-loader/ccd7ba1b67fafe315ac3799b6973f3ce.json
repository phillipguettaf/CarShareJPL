{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _bluebird = _interopRequireDefault(require(\"bluebird\"));\n\nvar _transaction = _interopRequireDefault(require(\"../../transaction\"));\n\nvar _lodash = require(\"lodash\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar debugTx = require('debug')('knex:tx');\n\nvar Oracle_Transaction =\n/*#__PURE__*/\nfunction (_transaction$default) {\n  _inherits(Oracle_Transaction, _transaction$default);\n\n  function Oracle_Transaction() {\n    _classCallCheck(this, Oracle_Transaction);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Oracle_Transaction).apply(this, arguments));\n  }\n\n  _createClass(Oracle_Transaction, [{\n    key: \"begin\",\n    // disable autocommit to allow correct behavior (default is true)\n    value: function begin() {\n      return _bluebird.default.resolve();\n    }\n  }, {\n    key: \"commit\",\n    value: function commit(conn, value) {\n      this._completed = true;\n      return conn.commitAsync().return(value).then(this._resolver, this._rejecter);\n    }\n  }, {\n    key: \"release\",\n    value: function release(conn, value) {\n      return this._resolver(value);\n    }\n  }, {\n    key: \"rollback\",\n    value: function rollback(conn, err) {\n      var _this = this;\n\n      this._completed = true;\n      debugTx('%s: rolling back', this.txid);\n      return conn.rollbackAsync().throw(err).catch(function (error) {\n        if ((0, _lodash.isUndefined)(error)) {\n          error = new Error(\"Transaction rejected with non-error: \".concat(error));\n        }\n\n        return _this._rejecter(error);\n      });\n    }\n  }, {\n    key: \"acquireConnection\",\n    value: function acquireConnection(config) {\n      var _this2 = this;\n\n      var t = this;\n      return _bluebird.default.try(function () {\n        return config.connection || t.client.acquireConnection();\n      }).then(function (connection) {\n        connection.__knexTxId = _this2.txid;\n        return connection;\n      }).tap(function (connection) {\n        if (!t.outerTx) {\n          connection.setAutoCommit(false);\n        }\n      }).disposer(function (connection) {\n        debugTx('%s: releasing connection', t.txid);\n        connection.setAutoCommit(true);\n\n        if (!config.connection) {\n          t.client.releaseConnection(connection);\n        } else {\n          debugTx('%s: not releasing external connection', t.txid);\n        }\n      });\n    }\n  }]);\n\n  return Oracle_Transaction;\n}(_transaction.default);\n\nexports.default = Oracle_Transaction;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}