{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _inherits = _interopRequireDefault(require(\"inherits\"));\n\nvar utils = _interopRequireWildcard(require(\"../utils\"));\n\nvar _tablecompiler = _interopRequireDefault(require(\"../../../schema/tablecompiler\"));\n\nvar helpers = _interopRequireWildcard(require(\"../../../helpers\"));\n\nvar _trigger = _interopRequireDefault(require(\"./trigger\"));\n\nvar _lodash = require(\"lodash\");\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint max-len:0 */\n// Table Compiler\n// ------\n\n\nfunction TableCompiler_Oracle() {\n  _tablecompiler.default.apply(this, arguments);\n}\n\n(0, _inherits.default)(TableCompiler_Oracle, _tablecompiler.default);\n(0, _lodash.assign)(TableCompiler_Oracle.prototype, {\n  addColumns: function addColumns(columns, prefix) {\n    if (columns.sql.length > 0) {\n      prefix = prefix || this.addColumnsPrefix;\n      var columnSql = (0, _lodash.map)(columns.sql, function (column) {\n        return column;\n      });\n      var alter = this.lowerCase ? 'alter table ' : 'ALTER TABLE ';\n      var sql = \"\".concat(alter).concat(this.tableName(), \" \").concat(prefix);\n\n      if (columns.sql.length > 1) {\n        sql += \"(\".concat(columnSql.join(', '), \")\");\n      } else {\n        sql += columnSql.join(', ');\n      }\n\n      this.pushQuery({\n        sql: sql,\n        bindings: columns.bindings\n      });\n    }\n  },\n  // Compile a rename column command.\n  renameColumn: function renameColumn(from, to) {\n    // Remove quotes around tableName\n    var tableName = this.tableName().slice(1, -1);\n    return this.pushQuery(_trigger.default.renameColumnTrigger(this.client.logger, tableName, from, to));\n  },\n  compileAdd: function compileAdd(builder) {\n    var table = this.formatter.wrap(builder);\n    var columns = this.prefixArray('add column', this.getColumns(builder));\n    return this.pushQuery({\n      sql: \"alter table \".concat(table, \" \").concat(columns.join(', '))\n    });\n  },\n  // Adds the \"create\" query to the query sequence.\n  createQuery: function createQuery(columns, ifNot) {\n    var sql = \"create table \".concat(this.tableName(), \" (\").concat(columns.sql.join(', '), \")\");\n    this.pushQuery({\n      // catch \"name is already used by an existing object\" for workaround for \"if not exists\"\n      sql: ifNot ? utils.wrapSqlWithCatch(sql, -955) : sql,\n      bindings: columns.bindings\n    });\n    if (this.single.comment) this.comment(this.single.comment);\n  },\n  // Compiles the comment on the table.\n  comment: function comment(_comment) {\n    this.pushQuery(\"comment on table \".concat(this.tableName(), \" is '\").concat(_comment, \"'\"));\n  },\n  addColumnsPrefix: 'add ',\n  alterColumnsPrefix: 'modify ',\n  dropColumn: function dropColumn() {\n    var columns = helpers.normalizeArr.apply(null, arguments);\n    this.pushQuery(\"alter table \".concat(this.tableName(), \" drop (\").concat(this.formatter.columnize(columns), \")\"));\n  },\n  changeType: function changeType() {// alter table + table + ' modify ' + wrapped + '// type';\n  },\n  _indexCommand: function _indexCommand(type, tableName, columns) {\n    return this.formatter.wrap(utils.generateCombinedName(this.client.logger, type, tableName, columns));\n  },\n  primary: function primary(columns, constraintName) {\n    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(\"\".concat(this.tableNameRaw, \"_pkey\"));\n    this.pushQuery(\"alter table \".concat(this.tableName(), \" add constraint \").concat(constraintName, \" primary key (\").concat(this.formatter.columnize(columns), \")\"));\n  },\n  dropPrimary: function dropPrimary(constraintName) {\n    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(this.tableNameRaw + '_pkey');\n    this.pushQuery(\"alter table \".concat(this.tableName(), \" drop constraint \").concat(constraintName));\n  },\n  index: function index(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(\"create index \".concat(indexName, \" on \").concat(this.tableName()) + ' (' + this.formatter.columnize(columns) + ')');\n  },\n  dropIndex: function dropIndex(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(\"drop index \".concat(indexName));\n  },\n  unique: function unique(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, columns);\n    this.pushQuery(\"alter table \".concat(this.tableName(), \" add constraint \").concat(indexName) + ' unique (' + this.formatter.columnize(columns) + ')');\n  },\n  dropUnique: function dropUnique(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, columns);\n    this.pushQuery(\"alter table \".concat(this.tableName(), \" drop constraint \").concat(indexName));\n  },\n  dropForeign: function dropForeign(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('foreign', this.tableNameRaw, columns);\n    this.pushQuery(\"alter table \".concat(this.tableName(), \" drop constraint \").concat(indexName));\n  }\n});\nvar _default = TableCompiler_Oracle;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}