{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar utils = _interopRequireWildcard(require(\"../utils\"));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nvar trigger = {\n  renameColumnTrigger: function renameColumnTrigger(logger, tableName, columnName, to) {\n    var triggerName = utils.generateCombinedName(logger, 'autoinc_trg', tableName);\n    var sequenceName = utils.generateCombinedName(logger, 'seq', tableName);\n    return \"DECLARE \" + \"PK_NAME VARCHAR(200); \" + \"IS_AUTOINC NUMBER := 0; \" + \"BEGIN\" + \"  EXECUTE IMMEDIATE ('ALTER TABLE \\\"\".concat(tableName, \"\\\" RENAME COLUMN \\\"\").concat(columnName, \"\\\" TO \\\"\").concat(to, \"\\\"');\") + \"  SELECT COUNT(*) INTO IS_AUTOINC from \\\"USER_TRIGGERS\\\" where trigger_name = '\".concat(triggerName, \"';\") + \"  IF (IS_AUTOINC > 0) THEN\" + \"    SELECT cols.column_name INTO PK_NAME\" + \"    FROM all_constraints cons, all_cons_columns cols\" + \"    WHERE cons.constraint_type = 'P'\" + \"    AND cons.constraint_name = cols.constraint_name\" + \"    AND cons.owner = cols.owner\" + \"    AND cols.table_name = '\".concat(tableName, \"';\") + \"    IF ('\".concat(to, \"' = PK_NAME) THEN\") + \"      EXECUTE IMMEDIATE ('DROP TRIGGER \\\"\".concat(triggerName, \"\\\"');\") + \"      EXECUTE IMMEDIATE ('create or replace trigger \\\"\".concat(triggerName, \"\\\"\") + \"      BEFORE INSERT on \\\"\".concat(tableName, \"\\\" for each row\") + \"        declare\" + \"        checking number := 1;\" + \"        begin\" + \"          if (:new.\\\"\".concat(to, \"\\\" is null) then\") + \"            while checking >= 1 loop\" + \"              select \\\"\".concat(sequenceName, \"\\\".nextval into :new.\\\"\").concat(to, \"\\\" from dual;\") + \"              select count(\\\"\".concat(to, \"\\\") into checking from \\\"\").concat(tableName, \"\\\"\") + \"              where \\\"\".concat(to, \"\\\" = :new.\\\"\").concat(to, \"\\\";\") + \"            end loop;\" + \"          end if;\" + \"        end;');\" + \"    end if;\" + \"  end if;\" + \"END;\";\n  },\n  createAutoIncrementTrigger: function createAutoIncrementTrigger(logger, tableName) {\n    var triggerName = utils.generateCombinedName(logger, 'autoinc_trg', tableName);\n    var sequenceName = utils.generateCombinedName(logger, 'seq', tableName);\n    return \"DECLARE \" + \"PK_NAME VARCHAR(200); \" + \"BEGIN\" + \"  EXECUTE IMMEDIATE ('CREATE SEQUENCE \\\"\".concat(sequenceName, \"\\\"');\") + \"  SELECT cols.column_name INTO PK_NAME\" + \"  FROM all_constraints cons, all_cons_columns cols\" + \"  WHERE cons.constraint_type = 'P'\" + \"  AND cons.constraint_name = cols.constraint_name\" + \"  AND cons.owner = cols.owner\" + \"  AND cols.table_name = '\".concat(tableName, \"';\") + \"  execute immediate ('create or replace trigger \\\"\".concat(triggerName, \"\\\"\") + \"  BEFORE INSERT on \\\"\".concat(tableName, \"\\\"\") + \"  for each row\" + \"  declare\" + \"  checking number := 1;\" + \"  begin\" + \"    if (:new.\\\"' || PK_NAME || '\\\" is null) then\" + \"      while checking >= 1 loop\" + \"        select \\\"\".concat(sequenceName, \"\\\".nextval into :new.\\\"' || PK_NAME || '\\\" from dual;\") + \"        select count(\\\"' || PK_NAME || '\\\") into checking from \\\"\".concat(tableName, \"\\\"\") + \"        where \\\"' || PK_NAME || '\\\" = :new.\\\"' || PK_NAME || '\\\";\" + \"      end loop;\" + \"    end if;\" + \"  end;'); \" + \"END;\";\n  },\n  renameTableAndAutoIncrementTrigger: function renameTableAndAutoIncrementTrigger(logger, tableName, to) {\n    var triggerName = utils.generateCombinedName(logger, 'autoinc_trg', tableName);\n    var sequenceName = utils.generateCombinedName(logger, 'seq', tableName);\n    var toTriggerName = utils.generateCombinedName(logger, 'autoinc_trg', to);\n    var toSequenceName = utils.generateCombinedName(logger, 'seq', to);\n    return \"DECLARE \" + \"PK_NAME VARCHAR(200); \" + \"IS_AUTOINC NUMBER := 0; \" + \"BEGIN\" + \"  EXECUTE IMMEDIATE ('RENAME \\\"\".concat(tableName, \"\\\" TO \\\"\").concat(to, \"\\\"');\") + \"  SELECT COUNT(*) INTO IS_AUTOINC from \\\"USER_TRIGGERS\\\" where trigger_name = '\".concat(triggerName, \"';\") + \"  IF (IS_AUTOINC > 0) THEN\" + \"    EXECUTE IMMEDIATE ('DROP TRIGGER \\\"\".concat(triggerName, \"\\\"');\") + \"    EXECUTE IMMEDIATE ('RENAME \\\"\".concat(sequenceName, \"\\\" TO \\\"\").concat(toSequenceName, \"\\\"');\") + \"    SELECT cols.column_name INTO PK_NAME\" + \"    FROM all_constraints cons, all_cons_columns cols\" + \"    WHERE cons.constraint_type = 'P'\" + \"    AND cons.constraint_name = cols.constraint_name\" + \"    AND cons.owner = cols.owner\" + \"    AND cols.table_name = '\".concat(to, \"';\") + \"    EXECUTE IMMEDIATE ('create or replace trigger \\\"\".concat(toTriggerName, \"\\\"\") + \"    BEFORE INSERT on \\\"\".concat(to, \"\\\" for each row\") + \"      declare\" + \"      checking number := 1;\" + \"      begin\" + \"        if (:new.\\\"' || PK_NAME || '\\\" is null) then\" + \"          while checking >= 1 loop\" + \"            select \\\"\".concat(toSequenceName, \"\\\".nextval into :new.\\\"' || PK_NAME || '\\\" from dual;\") + \"            select count(\\\"' || PK_NAME || '\\\") into checking from \\\"\".concat(to, \"\\\"\") + \"            where \\\"' || PK_NAME || '\\\" = :new.\\\"' || PK_NAME || '\\\";\" + \"          end loop;\" + \"        end if;\" + \"      end;');\" + \"  end if;\" + \"END;\";\n  }\n};\nvar _default = trigger;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}