{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _inherits = _interopRequireDefault(require(\"inherits\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _tablecompiler = _interopRequireDefault(require(\"../../postgres/schema/tablecompiler\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint max-len: 0 */\n// Redshift Table Builder & Compiler\n// -------\n\n\nfunction TableCompiler_Redshift() {\n  _tablecompiler.default.apply(this, arguments);\n}\n\n(0, _inherits.default)(TableCompiler_Redshift, _tablecompiler.default);\n\nTableCompiler_Redshift.prototype.index = function (columns, indexName, indexType) {\n  this.client.logger.warn('Redshift does not support the creation of indexes.');\n};\n\nTableCompiler_Redshift.prototype.dropIndex = function (columns, indexName) {\n  this.client.logger.warn('Redshift does not support the deletion of indexes.');\n}; // TODO: have to disable setting not null on columns that already exist...\n// Adds the \"create\" query to the query sequence.\n\n\nTableCompiler_Redshift.prototype.createQuery = function (columns, ifNot) {\n  var createStatement = ifNot ? 'create table if not exists ' : 'create table ';\n  var sql = createStatement + this.tableName() + ' (' + columns.sql.join(', ') + ')';\n  if (this.single.inherits) sql += \" like (\".concat(this.formatter.wrap(this.single.inherits), \")\");\n  this.pushQuery({\n    sql: sql,\n    bindings: columns.bindings\n  });\n  var hasComment = (0, _lodash.has)(this.single, 'comment');\n  if (hasComment) this.comment(this.single.comment);\n};\n\nTableCompiler_Redshift.prototype.primary = function (columns, constraintName) {\n  var _this = this;\n\n  var self = this;\n  constraintName = constraintName ? self.formatter.wrap(constraintName) : self.formatter.wrap(\"\".concat(this.tableNameRaw, \"_pkey\"));\n\n  if (columns.constructor !== Array) {\n    columns = [columns];\n  }\n\n  var thiscolumns = self.grouped.columns;\n\n  if (thiscolumns) {\n    var _loop = function _loop(i) {\n      var exists = thiscolumns.find(function (tcb) {\n        return tcb.grouping === 'columns' && tcb.builder && tcb.builder._method === 'add' && tcb.builder._args && tcb.builder._args.indexOf(columns[i]) > -1;\n      });\n\n      if (exists) {\n        exists = exists.builder;\n      }\n\n      var nullable = !(exists && exists._modifiers && exists._modifiers['nullable'] && exists._modifiers['nullable'][0] === false);\n\n      if (nullable) {\n        if (exists) {\n          return {\n            v: _this.client.logger.warn('Redshift does not allow primary keys to contain nullable columns.')\n          };\n        } else {\n          return {\n            v: _this.client.logger.warn('Redshift does not allow primary keys to contain nonexistent columns.')\n          };\n        }\n      }\n    };\n\n    for (var i = 0; i < columns.length; i++) {\n      var _ret = _loop(i);\n\n      if (typeof _ret === \"object\") return _ret.v;\n    }\n  }\n\n  return self.pushQuery(\"alter table \".concat(self.tableName(), \" add constraint \").concat(constraintName, \" primary key (\").concat(self.formatter.columnize(columns), \")\"));\n}; // Compiles column add. Redshift can only add one column per ALTER TABLE, so core addColumns doesn't work.  #2545\n\n\nTableCompiler_Redshift.prototype.addColumns = function (columns, prefix, colCompilers) {\n  if (prefix === this.alterColumnsPrefix) {\n    _tablecompiler.default.prototype.addColumns.call(this, columns, prefix, colCompilers);\n  } else {\n    prefix = prefix || this.addColumnsPrefix;\n    colCompilers = colCompilers || this.getColumns();\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = colCompilers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var col = _step.value;\n        var quotedTableName = this.tableName();\n        var colCompiled = col.compileColumn();\n        this.pushQuery({\n          sql: \"alter table \".concat(quotedTableName, \" \").concat(prefix).concat(colCompiled),\n          bindings: []\n        });\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n};\n\nvar _default = TableCompiler_Redshift;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}