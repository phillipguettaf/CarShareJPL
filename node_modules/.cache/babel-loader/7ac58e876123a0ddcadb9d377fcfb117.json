{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _inherits = _interopRequireDefault(require(\"inherits\"));\n\nvar _compiler = _interopRequireDefault(require(\"../../../schema/compiler\"));\n\nvar utils = _interopRequireWildcard(require(\"../utils\"));\n\nvar _trigger = _interopRequireDefault(require(\"./trigger\"));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Oracle Schema Compiler\n// -------\n\n\nfunction SchemaCompiler_Oracle() {\n  _compiler.default.apply(this, arguments);\n}\n\n(0, _inherits.default)(SchemaCompiler_Oracle, _compiler.default); // Rename a table on the schema.\n\nSchemaCompiler_Oracle.prototype.renameTable = function (tableName, to) {\n  var renameTable = _trigger.default.renameTableAndAutoIncrementTrigger(this.client.logger, tableName, to);\n\n  this.pushQuery(renameTable);\n}; // Check whether a table exists on the query.\n\n\nSchemaCompiler_Oracle.prototype.hasTable = function (tableName) {\n  this.pushQuery({\n    sql: 'select TABLE_NAME from USER_TABLES where TABLE_NAME = ' + this.formatter.parameter(tableName),\n    output: function output(resp) {\n      return resp.length > 0;\n    }\n  });\n}; // Check whether a column exists on the schema.\n\n\nSchemaCompiler_Oracle.prototype.hasColumn = function (tableName, column) {\n  var sql = \"select COLUMN_NAME from USER_TAB_COLUMNS \" + \"where TABLE_NAME = \".concat(this.formatter.parameter(tableName), \" \") + \"and COLUMN_NAME = \".concat(this.formatter.parameter(column));\n  this.pushQuery({\n    sql: sql,\n    output: function output(resp) {\n      return resp.length > 0;\n    }\n  });\n};\n\nSchemaCompiler_Oracle.prototype.dropSequenceIfExists = function (sequenceName) {\n  this.pushQuery(utils.wrapSqlWithCatch(\"drop sequence \".concat(this.formatter.wrap(sequenceName)), -2289));\n};\n\nSchemaCompiler_Oracle.prototype._dropRelatedSequenceIfExists = function (tableName) {\n  // removing the sequence that was possibly generated by increments() column\n  var sequenceName = utils.generateCombinedName(this.client.logger, 'seq', tableName);\n  this.dropSequenceIfExists(sequenceName);\n};\n\nSchemaCompiler_Oracle.prototype.dropTable = function (tableName) {\n  this.pushQuery(\"drop table \".concat(this.formatter.wrap(tableName))); // removing the sequence that was possibly generated by increments() column\n\n  this._dropRelatedSequenceIfExists(tableName);\n};\n\nSchemaCompiler_Oracle.prototype.dropTableIfExists = function (tableName) {\n  this.pushQuery(utils.wrapSqlWithCatch(\"drop table \".concat(this.formatter.wrap(tableName)), -942)); // removing the sequence that was possibly generated by increments() column\n\n  this._dropRelatedSequenceIfExists(tableName);\n};\n\nvar _default = SchemaCompiler_Oracle;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}