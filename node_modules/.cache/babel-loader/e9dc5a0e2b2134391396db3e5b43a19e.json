{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureTable = ensureTable;\nexports.getSchemaBuilder = getSchemaBuilder;\n\nvar _tableResolver = require(\"./table-resolver\");\n\nfunction ensureTable(tableName, schemaName, trxOrKnex) {\n  var lockTable = (0, _tableResolver.getLockTableName)(tableName);\n  var lockTableWithSchema = (0, _tableResolver.getLockTableNameWithSchema)(tableName, schemaName);\n  return getSchemaBuilder(trxOrKnex, schemaName).hasTable(tableName).then(function (exists) {\n    return !exists && _createMigrationTable(tableName, schemaName, trxOrKnex);\n  }).then(function () {\n    return getSchemaBuilder(trxOrKnex, schemaName).hasTable(lockTable);\n  }).then(function (exists) {\n    return !exists && _createMigrationLockTable(lockTable, schemaName, trxOrKnex);\n  }).then(function () {\n    return (0, _tableResolver.getTable)(trxOrKnex, lockTable, schemaName).select('*');\n  }).then(function (data) {\n    return !data.length && trxOrKnex.into(lockTableWithSchema).insert({\n      is_locked: 0\n    });\n  });\n}\n\nfunction _createMigrationTable(tableName, schemaName, trxOrKnex) {\n  return getSchemaBuilder(trxOrKnex, schemaName).createTable((0, _tableResolver.getTableName)(tableName), function (t) {\n    t.increments();\n    t.string('name');\n    t.integer('batch');\n    t.timestamp('migration_time');\n  });\n}\n\nfunction _createMigrationLockTable(tableName, schemaName, trxOrKnex) {\n  return getSchemaBuilder(trxOrKnex, schemaName).createTable(tableName, function (t) {\n    t.increments('index').primary();\n    t.integer('is_locked');\n  });\n} //Get schema-aware schema builder for a given schema nam\n\n\nfunction getSchemaBuilder(trxOrKnex, schemaName) {\n  return schemaName ? trxOrKnex.schema.withSchema(schemaName) : trxOrKnex.schema;\n}","map":null,"metadata":{},"sourceType":"script"}