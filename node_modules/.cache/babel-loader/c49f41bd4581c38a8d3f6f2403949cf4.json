{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pushQuery = pushQuery;\nexports.pushAdditional = pushAdditional;\nexports.unshiftQuery = unshiftQuery;\n\nvar _lodash = require(\"lodash\"); // Push a new query onto the compiled \"sequence\" stack,\n// creating a new formatter, returning the compiler.\n\n\nfunction pushQuery(query) {\n  if (!query) return;\n\n  if ((0, _lodash.isString)(query)) {\n    query = {\n      sql: query\n    };\n  }\n\n  if (!query.bindings) {\n    query.bindings = this.formatter.bindings;\n  }\n\n  this.sequence.push(query);\n  this.formatter = this.client.formatter(this._commonBuilder);\n} // Used in cases where we need to push some additional column specific statements.\n\n\nfunction pushAdditional(fn) {\n  var child = new this.constructor(this.client, this.tableCompiler, this.columnBuilder);\n  fn.call(child, (0, _lodash.tail)(arguments));\n  this.sequence.additional = (this.sequence.additional || []).concat(child.sequence);\n} // Unshift a new query onto the compiled \"sequence\" stack,\n// creating a new formatter, returning the compiler.\n\n\nfunction unshiftQuery(query) {\n  if (!query) return;\n\n  if ((0, _lodash.isString)(query)) {\n    query = {\n      sql: query\n    };\n  }\n\n  if (!query.bindings) {\n    query.bindings = this.formatter.bindings;\n  }\n\n  this.sequence.unshift(query);\n  this.formatter = this.client.formatter(this._commonBuilder);\n}","map":null,"metadata":{},"sourceType":"script"}