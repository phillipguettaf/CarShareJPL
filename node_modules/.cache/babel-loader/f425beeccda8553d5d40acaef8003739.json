{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/phill/Documents/RMIT/2019Sem1/COSC2408/JPLCarShare/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar Promise = require('bluebird');\n\nvar Transaction = require('../../transaction');\n\nvar debugTx = require('debug')('knex:tx');\n\nvar Oracle_Transaction =\n/*#__PURE__*/\nfunction (_Transaction) {\n  _inherits(Oracle_Transaction, _Transaction);\n\n  function Oracle_Transaction() {\n    _classCallCheck(this, Oracle_Transaction);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Oracle_Transaction).apply(this, arguments));\n  }\n\n  _createClass(Oracle_Transaction, [{\n    key: \"begin\",\n    // disable autocommit to allow correct behavior (default is true)\n    value: function begin() {\n      return Promise.resolve();\n    }\n  }, {\n    key: \"commit\",\n    value: function commit(conn, value) {\n      this._completed = true;\n      return conn.commitAsync().return(value).then(this._resolver, this._rejecter);\n    }\n  }, {\n    key: \"release\",\n    value: function release(conn, value) {\n      return this._resolver(value);\n    }\n  }, {\n    key: \"rollback\",\n    value: function rollback(conn, err) {\n      var self = this;\n      this._completed = true;\n      debugTx('%s: rolling back', this.txid);\n      return conn.rollbackAsync().timeout(5000).catch(Promise.TimeoutError, function (e) {\n        self._rejecter(e);\n      }).then(function () {\n        if ((0, _lodash.isUndefined)(err)) {\n          err = new Error(\"Transaction rejected with non-error: \".concat(err));\n        }\n\n        self._rejecter(err);\n      });\n    }\n  }, {\n    key: \"savepoint\",\n    value: function savepoint(conn) {\n      return this.query(conn, \"SAVEPOINT \".concat(this.txid));\n    }\n  }, {\n    key: \"acquireConnection\",\n    value: function acquireConnection(config) {\n      var t = this;\n      return Promise.try(function () {\n        return t.client.acquireConnection().then(function (cnx) {\n          cnx.__knexTxId = t.txid;\n          cnx.isTransaction = true;\n          return cnx;\n        });\n      }).disposer(function (connection) {\n        debugTx('%s: releasing connection', t.txid);\n        connection.isTransaction = false;\n        connection.commitAsync().then(function (err) {\n          if (err) {\n            this._rejecter(err);\n          }\n\n          if (!config.connection) {\n            t.client.releaseConnection(connection);\n          } else {\n            debugTx('%s: not releasing external connection', t.txid);\n          }\n        });\n      });\n    }\n  }]);\n\n  return Oracle_Transaction;\n}(Transaction);\n\nexports.default = Oracle_Transaction;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}