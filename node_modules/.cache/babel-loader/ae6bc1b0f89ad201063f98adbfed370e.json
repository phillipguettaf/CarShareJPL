{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateCombinedName = generateCombinedName;\nexports.wrapSqlWithCatch = wrapSqlWithCatch;\nexports.ReturningHelper = ReturningHelper;\n\nfunction generateCombinedName(logger, postfix, name, subNames) {\n  var crypto = require('crypto');\n\n  var limit = 30;\n  if (!Array.isArray(subNames)) subNames = subNames ? [subNames] : [];\n  var table = name.replace(/\\.|-/g, '_');\n  var subNamesPart = subNames.join('_');\n  var result = \"\".concat(table, \"_\").concat(subNamesPart.length ? subNamesPart + '_' : '').concat(postfix).toLowerCase();\n\n  if (result.length > limit) {\n    logger.warn(\"Automatically generated name \\\"\".concat(result, \"\\\" exceeds \").concat(limit, \" character \") + \"limit for Oracle. Using base64 encoded sha1 of that name instead.\"); // generates the sha1 of the name and encode it with base64\n\n    result = crypto.createHash('sha1').update(result).digest('base64').replace('=', '');\n  }\n\n  return result;\n}\n\nfunction wrapSqlWithCatch(sql, errorNumberToCatch) {\n  return \"begin execute immediate '\".concat(sql.replace(/'/g, \"''\"), \"'; \") + \"exception when others then if sqlcode != \".concat(errorNumberToCatch, \" then raise; \") + \"end if; \" + \"end;\";\n}\n\nfunction ReturningHelper(columnName) {\n  this.columnName = columnName;\n}\n\nReturningHelper.prototype.toString = function () {\n  return \"[object ReturningHelper:\".concat(this.columnName, \"]\");\n};","map":null,"metadata":{},"sourceType":"script"}