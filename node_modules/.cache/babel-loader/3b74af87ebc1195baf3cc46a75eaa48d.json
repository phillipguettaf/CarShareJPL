{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _inherits = _interopRequireDefault(require(\"inherits\"));\n\nvar _compiler = _interopRequireDefault(require(\"../../../schema/compiler\"));\n\nvar _lodash = require(\"lodash\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // MySQL Schema Compiler\n// -------\n\n\nfunction SchemaCompiler_MSSQL(client, builder) {\n  _compiler.default.call(this, client, builder);\n}\n\n(0, _inherits.default)(SchemaCompiler_MSSQL, _compiler.default);\n(0, _lodash.assign)(SchemaCompiler_MSSQL.prototype, {\n  dropTablePrefix: 'DROP TABLE ',\n  dropTableIfExists: function dropTableIfExists(tableName) {\n    var name = this.formatter.wrap(prefixedTableName(this.schema, tableName));\n    this.pushQuery(\"if object_id('\".concat(name, \"', 'U') is not null DROP TABLE \").concat(name));\n  },\n  // Rename a table on the schema.\n  renameTable: function renameTable(tableName, to) {\n    this.pushQuery(\"exec sp_rename \".concat(this.formatter.parameter(prefixedTableName(this.schema, tableName)), \", \").concat(this.formatter.parameter(to)));\n  },\n  // Check whether a table exists on the query.\n  hasTable: function hasTable(tableName) {\n    var formattedTable = this.formatter.parameter(this.formatter.wrap(prefixedTableName(this.schema, tableName)));\n    var sql = \"select object_id from sys.tables \" + \"where object_id = object_id(\".concat(formattedTable, \")\");\n    this.pushQuery({\n      sql: sql,\n      output: function output(resp) {\n        return resp.length > 0;\n      }\n    });\n  },\n  // Check whether a column exists on the schema.\n  hasColumn: function hasColumn(tableName, column) {\n    var formattedColumn = this.formatter.parameter(column);\n    var formattedTable = this.formatter.parameter(this.formatter.wrap(prefixedTableName(this.schema, tableName)));\n    var sql = \"select object_id from sys.columns \" + \"where name = \".concat(formattedColumn, \" \") + \"and object_id = object_id(\".concat(formattedTable, \")\");\n    this.pushQuery({\n      sql: sql,\n      output: function output(resp) {\n        return resp.length > 0;\n      }\n    });\n  }\n});\n\nfunction prefixedTableName(prefix, table) {\n  return prefix ? \"\".concat(prefix, \".\").concat(table) : table;\n}\n\nvar _default = SchemaCompiler_MSSQL;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}