{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _inherits = _interopRequireDefault(require(\"inherits\"));\n\nvar _tablecompiler = _interopRequireDefault(require(\"../../../schema/tablecompiler\"));\n\nvar helpers = _interopRequireWildcard(require(\"../../../helpers\"));\n\nvar _bluebird = _interopRequireDefault(require(\"bluebird\"));\n\nvar _lodash = require(\"lodash\");\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint max-len:0 */\n// MSSQL Table Builder & Compiler\n// -------\n// Table Compiler\n// ------\n\n\nfunction TableCompiler_MSSQL() {\n  _tablecompiler.default.apply(this, arguments);\n}\n\n(0, _inherits.default)(TableCompiler_MSSQL, _tablecompiler.default);\n(0, _lodash.assign)(TableCompiler_MSSQL.prototype, {\n  createAlterTableMethods: ['foreign', 'primary'],\n  createQuery: function createQuery(columns, ifNot) {\n    var createStatement = ifNot ? \"if object_id('\".concat(this.tableName(), \"', 'U') is null CREATE TABLE \") : 'CREATE TABLE ';\n    var sql = createStatement + this.tableName() + (this._formatting ? ' (\\n    ' : ' (') + columns.sql.join(this._formatting ? ',\\n    ' : ', ') + ')';\n\n    if (this.single.comment) {\n      var comment = this.single.comment;\n      if (comment.length > 60) this.client.logger.warn('The max length for a table comment is 60 characters');\n    }\n\n    this.pushQuery(sql);\n  },\n  lowerCase: false,\n  addColumnsPrefix: 'ADD ',\n  dropColumnPrefix: 'DROP COLUMN ',\n  alterColumnPrefix: 'ALTER COLUMN ',\n  // Compiles column add.  Multiple columns need only one ADD clause (not one ADD per column) so core addColumns doesn't work.  #1348\n  addColumns: function addColumns(columns, prefix) {\n    prefix = prefix || this.addColumnsPrefix;\n\n    if (columns.sql.length > 0) {\n      this.pushQuery({\n        sql: (this.lowerCase ? 'alter table ' : 'ALTER TABLE ') + this.tableName() + ' ' + prefix + columns.sql.join(', '),\n        bindings: columns.bindings\n      });\n    }\n  },\n  // Compiles column drop.  Multiple columns need only one DROP clause (not one DROP per column) so core dropColumn doesn't work.  #1348\n  dropColumn: function dropColumn() {\n    var _this2 = this;\n\n    var columns = helpers.normalizeArr.apply(null, arguments);\n    var drops = (Array.isArray(columns) ? columns : [columns]).map(function (column) {\n      return _this2.formatter.wrap(column);\n    });\n    this.pushQuery((this.lowerCase ? 'alter table ' : 'ALTER TABLE ') + this.tableName() + ' ' + this.dropColumnPrefix + drops.join(', '));\n  },\n  // Compiles the comment on the table.\n  comment: function comment() {},\n  changeType: function changeType() {},\n  // Renames a column on the table.\n  renameColumn: function renameColumn(from, to) {\n    this.pushQuery(\"exec sp_rename \".concat(this.formatter.parameter(this.tableName() + '.' + from), \", \").concat(this.formatter.parameter(to), \", 'COLUMN'\"));\n  },\n  dropFKRefs: function dropFKRefs(runner, refs) {\n    var formatter = this.client.formatter(this.tableBuilder);\n    return _bluebird.default.all(refs.map(function (ref) {\n      var constraintName = formatter.wrap(ref.CONSTRAINT_NAME);\n      var tableName = formatter.wrap(ref.TABLE_NAME);\n      return runner.query({\n        sql: \"ALTER TABLE \".concat(tableName, \" DROP CONSTRAINT \").concat(constraintName)\n      });\n    }));\n  },\n  createFKRefs: function createFKRefs(runner, refs) {\n    var formatter = this.client.formatter(this.tableBuilder);\n    return _bluebird.default.all(refs.map(function (ref) {\n      var tableName = formatter.wrap(ref.TABLE_NAME);\n      var keyName = formatter.wrap(ref.CONSTRAINT_NAME);\n      var column = formatter.columnize(ref.COLUMN_NAME);\n      var references = formatter.columnize(ref.REFERENCED_COLUMN_NAME);\n      var inTable = formatter.wrap(ref.REFERENCED_TABLE_NAME);\n      var onUpdate = \" ON UPDATE \".concat(ref.UPDATE_RULE);\n      var onDelete = \" ON DELETE \".concat(ref.DELETE_RULE);\n      return runner.query({\n        sql: \"ALTER TABLE \".concat(tableName, \" ADD CONSTRAINT \").concat(keyName) + ' FOREIGN KEY (' + column + ') REFERENCES ' + inTable + ' (' + references + ')' + onUpdate + onDelete\n      });\n    }));\n  },\n  index: function index(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(\"CREATE INDEX \".concat(indexName, \" ON \").concat(this.tableName(), \" (\").concat(this.formatter.columnize(columns), \")\"));\n  },\n  primary: function primary(columns, constraintName) {\n    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(\"\".concat(this.tableNameRaw, \"_pkey\"));\n\n    if (!this.forCreate) {\n      this.pushQuery(\"ALTER TABLE \".concat(this.tableName(), \" ADD CONSTRAINT \").concat(constraintName, \" PRIMARY KEY (\").concat(this.formatter.columnize(columns), \")\"));\n    } else {\n      this.pushQuery(\"CONSTRAINT \".concat(constraintName, \" PRIMARY KEY (\").concat(this.formatter.columnize(columns), \")\"));\n    }\n  },\n  unique: function unique(columns, indexName) {\n    var _this = this;\n\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, columns);\n\n    if (!Array.isArray(columns)) {\n      columns = [columns];\n    }\n\n    var whereAllTheColumnsAreNotNull = columns.map(function (column) {\n      return _this.formatter.columnize(column) + ' IS NOT NULL';\n    }).join(' AND '); // make unique constraint that allows null https://stackoverflow.com/a/767702/360060\n    // to be more or less compatible with other DBs (if any of the columns is NULL then \"duplicates\" are allowed)\n\n    this.pushQuery(\"CREATE UNIQUE INDEX \".concat(indexName, \" ON \").concat(this.tableName(), \" (\").concat(this.formatter.columnize(columns), \") WHERE \").concat(whereAllTheColumnsAreNotNull));\n  },\n  // Compile a drop index command.\n  dropIndex: function dropIndex(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(\"DROP INDEX \".concat(indexName, \" ON \").concat(this.tableName()));\n  },\n  // Compile a drop foreign key command.\n  dropForeign: function dropForeign(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('foreign', this.tableNameRaw, columns);\n    this.pushQuery(\"ALTER TABLE \".concat(this.tableName(), \" DROP CONSTRAINT \").concat(indexName));\n  },\n  // Compile a drop primary key command.\n  dropPrimary: function dropPrimary(constraintName) {\n    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(\"\".concat(this.tableNameRaw, \"_pkey\"));\n    this.pushQuery(\"ALTER TABLE \".concat(this.tableName(), \" DROP CONSTRAINT \").concat(constraintName));\n  },\n  // Compile a drop unique key command.\n  dropUnique: function dropUnique(column, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, column);\n    this.pushQuery(\"DROP INDEX \".concat(indexName, \" ON \").concat(this.tableName()));\n  }\n});\nvar _default = TableCompiler_MSSQL;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}