{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helpers = require(\"./helpers\");\n\nvar _lodash = require(\"lodash\"); // The \"SchemaCompiler\" takes all of the query statements which have been\n// gathered in the \"SchemaBuilder\" and turns them into an array of\n// properly formatted / bound query strings.\n\n\nfunction SchemaCompiler(client, builder) {\n  this.builder = builder;\n  this._commonBuilder = this.builder;\n  this.client = client;\n  this.schema = builder._schema;\n  this.formatter = client.formatter(builder);\n  this.sequence = [];\n}\n\n(0, _lodash.assign)(SchemaCompiler.prototype, {\n  pushQuery: _helpers.pushQuery,\n  pushAdditional: _helpers.pushAdditional,\n  unshiftQuery: _helpers.unshiftQuery,\n  createTable: buildTable('create'),\n  createTableIfNotExists: buildTable('createIfNot'),\n  alterTable: buildTable('alter'),\n  dropTablePrefix: 'drop table ',\n  dropTable: function dropTable(tableName) {\n    this.pushQuery(this.dropTablePrefix + this.formatter.wrap(prefixedTableName(this.schema, tableName)));\n  },\n  dropTableIfExists: function dropTableIfExists(tableName) {\n    this.pushQuery(this.dropTablePrefix + 'if exists ' + this.formatter.wrap(prefixedTableName(this.schema, tableName)));\n  },\n  raw: function raw(sql, bindings) {\n    this.sequence.push(this.client.raw(sql, bindings).toSQL());\n  },\n  toSQL: function toSQL() {\n    var sequence = this.builder._sequence;\n\n    for (var i = 0, l = sequence.length; i < l; i++) {\n      var query = sequence[i];\n      this[query.method].apply(this, query.args);\n    }\n\n    return this.sequence;\n  }\n});\n\nfunction buildTable(type) {\n  return function (tableName, fn) {\n    var builder = this.client.tableBuilder(type, tableName, fn); // pass queryContext down to tableBuilder but do not overwrite it if already set\n\n    var queryContext = this.builder.queryContext();\n\n    if (!(0, _lodash.isUndefined)(queryContext) && (0, _lodash.isUndefined)(builder.queryContext())) {\n      builder.queryContext(queryContext);\n    }\n\n    builder.setSchema(this.schema);\n    var sql = builder.toSQL();\n\n    for (var i = 0, l = sql.length; i < l; i++) {\n      this.sequence.push(sql[i]);\n    }\n  };\n}\n\nfunction prefixedTableName(prefix, table) {\n  return prefix ? \"\".concat(prefix, \".\").concat(table) : table;\n}\n\nvar _default = SchemaCompiler;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}