{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = batchInsert;\n\nvar _lodash = require(\"lodash\");\n\nvar _bluebird = _interopRequireDefault(require(\"bluebird\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction batchInsert(client, tableName, batch) {\n  var chunkSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n\n  var _returning = void 0;\n\n  var autoTransaction = true;\n  var transaction = null;\n\n  var getTransaction = function getTransaction() {\n    return new _bluebird.default(function (resolve, reject) {\n      if (transaction) {\n        autoTransaction = false;\n        return resolve(transaction);\n      }\n\n      autoTransaction = true;\n      client.transaction(resolve).catch(reject);\n    });\n  };\n\n  var wrapper = (0, _lodash.assign)(new _bluebird.default(function (resolve, reject) {\n    var chunks = (0, _lodash.chunk)(batch, chunkSize);\n\n    if (!(0, _lodash.isNumber)(chunkSize) || chunkSize < 1) {\n      return reject(new TypeError(\"Invalid chunkSize: \".concat(chunkSize)));\n    }\n\n    if (!(0, _lodash.isArray)(batch)) {\n      return reject(new TypeError(\"Invalid batch: Expected array, got \".concat(typeof batch)));\n    } //Next tick to ensure wrapper functions are called if needed\n\n\n    return _bluebird.default.delay(1).then(getTransaction).then(function (tr) {\n      return _bluebird.default.mapSeries(chunks, function (items) {\n        return tr(tableName).insert(items, _returning);\n      }).then(function (result) {\n        result = (0, _lodash.flatten)(result || []);\n\n        if (autoTransaction) {\n          //TODO: -- Oracle tr.commit() does not return a 'thenable' !? Ugly hack for now.\n          return (tr.commit(result) || _bluebird.default.resolve()).then(function () {\n            return result;\n          });\n        }\n\n        return result;\n      }).catch(function (error) {\n        if (autoTransaction) {\n          return tr.rollback(error).then(function () {\n            return _bluebird.default.reject(error);\n          });\n        }\n\n        return _bluebird.default.reject(error);\n      });\n    }).then(resolve).catch(reject);\n  }), {\n    returning: function returning(columns) {\n      _returning = columns;\n      return this;\n    },\n    transacting: function transacting(tr) {\n      transaction = tr;\n      return this;\n    }\n  });\n  return wrapper;\n}\n\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}