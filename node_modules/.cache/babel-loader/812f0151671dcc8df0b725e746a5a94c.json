{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Knex;\n\nvar _raw = _interopRequireDefault(require(\"./raw\"));\n\nvar _client = _interopRequireDefault(require(\"./client\"));\n\nvar _makeKnex = _interopRequireDefault(require(\"./util/make-knex\"));\n\nvar _parseConnection = _interopRequireDefault(require(\"./util/parse-connection\"));\n\nvar _fakeClient = _interopRequireDefault(require(\"./util/fake-client\"));\n\nvar _constants = require(\"./constants\");\n\nvar _helpers = require(\"./helpers\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction Knex(config) {\n  // If config is a string, try to parse it\n  if (typeof config === 'string') {\n    var parsedConfig = Object.assign((0, _parseConnection.default)(config), arguments[2]);\n    return new Knex(parsedConfig);\n  }\n\n  var Dialect; // If user provided no relevant parameters, use generic client\n\n  if (arguments.length === 0 || !config.client && !config.dialect) {\n    Dialect = _client.default;\n  } // If user provided Client constructor as a parameter, use it\n  else if (typeof config.client === 'function' && config.client.prototype instanceof _client.default) {\n      Dialect = config.client;\n    } // If neither applies, let's assume user specified name of a client or dialect as a string\n    else {\n        var clientName = config.client || config.dialect;\n\n        if (!_constants.SUPPORTED_CLIENTS.includes(clientName)) {\n          throw new Error(\"knex: Unknown configuration option 'client' value \".concat(clientName, \". Note that it is case-sensitive, check documentation for supported values.\"));\n        }\n\n        var resolvedClientName = (0, _helpers.resolveClientNameWithAliases)(clientName);\n        Dialect = require(\"./dialects/\".concat(resolvedClientName, \"/index.js\"));\n      } // If config connection parameter is passed as string, try to parse it\n\n\n  if (typeof config.connection === 'string') {\n    config = Object.assign({}, config, {\n      connection: (0, _parseConnection.default)(config.connection).connection\n    });\n  }\n\n  var newKnex = (0, _makeKnex.default)(new Dialect(config));\n\n  if (config.userParams) {\n    newKnex.userParams = config.userParams;\n  }\n\n  return newKnex;\n} // Expose Client on the main Knex namespace.\n\n\nKnex.Client = _client.default;\n/* eslint no-console:0 */\n\nObject.defineProperties(Knex, {\n  Promise: {\n    get: function get() {\n      console.warn(\"Knex.Promise is deprecated, either require bluebird or use the global Promise\");\n      return require('bluebird');\n    }\n  }\n}); // Run a \"raw\" query, though we can't do anything with it other than put\n// it in a query statement.\n\nKnex.raw = function (sql, bindings) {\n  console.warn('global Knex.raw is deprecated, use knex.raw (chain off an initialized knex object)');\n  return new _raw.default(_fakeClient.default).set(sql, bindings);\n};\n\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}