{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _inherits = _interopRequireDefault(require(\"inherits\"));\n\nvar _columncompiler = _interopRequireDefault(require(\"../../../schema/columncompiler\"));\n\nvar _lodash = require(\"lodash\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // MySQL Column Compiler\n// -------\n\n\nfunction ColumnCompiler_MSSQL() {\n  _columncompiler.default.apply(this, arguments);\n\n  this.modifiers = ['nullable', 'defaultTo', 'first', 'after', 'comment'];\n}\n\n(0, _inherits.default)(ColumnCompiler_MSSQL, _columncompiler.default); // Types\n// ------\n\n(0, _lodash.assign)(ColumnCompiler_MSSQL.prototype, {\n  increments: 'int identity(1,1) not null primary key',\n  bigincrements: 'bigint identity(1,1) not null primary key',\n  bigint: 'bigint',\n  double: function double(precision, scale) {\n    return 'float';\n  },\n  floating: function floating(precision, scale) {\n    // ignore precicion / scale which is mysql specific stuff\n    return \"float\";\n  },\n  integer: function integer(length) {\n    length = length ? \"(\".concat(this._num(length, 11), \")\") : '';\n    return \"int\".concat(length);\n  },\n  mediumint: 'int',\n  smallint: 'smallint',\n  tinyint: function tinyint(length) {\n    length = length ? \"(\".concat(this._num(length, 1), \")\") : '';\n    return \"tinyint\".concat(length);\n  },\n  varchar: function varchar(length) {\n    return \"nvarchar(\".concat(this._num(length, 255), \")\");\n  },\n  text: 'nvarchar(max)',\n  mediumtext: 'nvarchar(max)',\n  longtext: 'nvarchar(max)',\n  // TODO: mssql supports check constraints as of SQL Server 2008\n  // so make enu here more like postgres\n  enu: 'nvarchar(100)',\n  uuid: 'uniqueidentifier',\n  datetime: 'datetime2',\n  timestamp: function timestamp() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$useTz = _ref.useTz,\n        useTz = _ref$useTz === void 0 ? false : _ref$useTz;\n\n    return useTz ? 'datetimeoffset' : 'datetime2';\n  },\n  bit: function bit(length) {\n    if (length > 1) {\n      this.client.logger.warn('Bit field is exactly 1 bit length for MSSQL');\n    }\n\n    return 'bit';\n  },\n  binary: function binary(length) {\n    return length ? \"varbinary(\".concat(this._num(length), \")\") : 'varbinary(max)';\n  },\n  bool: 'bit',\n  // Modifiers\n  // ------\n  defaultTo: function defaultTo(value) {\n    var defaultVal = ColumnCompiler_MSSQL.super_.prototype.defaultTo.apply(this, arguments);\n\n    if (this.type !== 'blob' && this.type.indexOf('text') === -1) {\n      return defaultVal;\n    }\n\n    return '';\n  },\n  first: function first() {\n    this.client.logger.warn('Column first modifier not available for MSSQL');\n    return '';\n  },\n  after: function after(column) {\n    this.client.logger.warn('Column after modifier not available for MSSQL');\n    return '';\n  },\n  comment: function comment(_comment) {\n    if (_comment && _comment.length > 255) {\n      this.client.logger.warn('Your comment is longer than the max comment length for MSSQL');\n    }\n\n    return '';\n  }\n});\nvar _default = ColumnCompiler_MSSQL;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}