{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _inherits = _interopRequireDefault(require(\"inherits\"));\n\nvar _compiler = _interopRequireDefault(require(\"../../../schema/compiler\"));\n\nvar _lodash = require(\"lodash\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // MySQL Schema Compiler\n// -------\n\n\nfunction SchemaCompiler_MySQL(client, builder) {\n  _compiler.default.call(this, client, builder);\n}\n\n(0, _inherits.default)(SchemaCompiler_MySQL, _compiler.default);\n(0, _lodash.assign)(SchemaCompiler_MySQL.prototype, {\n  // Rename a table on the schema.\n  renameTable: function renameTable(tableName, to) {\n    this.pushQuery(\"rename table \".concat(this.formatter.wrap(tableName), \" to \").concat(this.formatter.wrap(to)));\n  },\n  // Check whether a table exists on the query.\n  hasTable: function hasTable(tableName) {\n    var sql = 'select * from information_schema.tables where table_name = ?';\n    var bindings = [tableName];\n\n    if (this.schema) {\n      sql += ' and table_schema = ?';\n      bindings.push(this.schema);\n    } else {\n      sql += ' and table_schema = database()';\n    }\n\n    this.pushQuery({\n      sql: sql,\n      bindings: bindings,\n      output: function output(resp) {\n        return resp.length > 0;\n      }\n    });\n  },\n  // Check whether a column exists on the schema.\n  hasColumn: function hasColumn(tableName, column) {\n    this.pushQuery({\n      sql: \"show columns from \".concat(this.formatter.wrap(tableName)) + ' like ' + this.formatter.parameter(column),\n      output: function output(resp) {\n        return resp.length > 0;\n      }\n    });\n  }\n});\nvar _default = SchemaCompiler_MySQL;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}